#+title: Shell Config

* Alacritty
#+begin_src toml :tangle ~/.config/alacritty/alacritty.toml
[[colors.indexed_colors]]
color = "0xcb4b16"
index = 16

[[colors.indexed_colors]]
color = "0xd33682"
index = 17

[[colors.indexed_colors]]
color = "0x073642"
index = 18

[[colors.indexed_colors]]
color = "0x586e75"
index = 19

[[colors.indexed_colors]]
color = "0x839496"
index = 20

[[colors.indexed_colors]]
color = "0xeee8d5"
index = 21

[colors.bright]
black = "0x657b83"
blue = "0x268bd2"
cyan = "0x2aa198"
green = "0x859900"
magenta = "0x6c71c4"
red = "0xdc322f"
white = "0xfdf6e3"
yellow = "0xb58900"

[colors.cursor]
cursor = "0x93a1a1"
text = "0x002b36"

[colors.normal]
black = "0x002b36"
blue = "0x268bd2"
cyan = "0x2aa198"
green = "0x859900"
magenta = "0x6c71c4"
red = "0xdc322f"
white = "0x93a1a1"
yellow = "0xb58900"

[colors.primary]
background = "0x002b36"
foreground = "0x93a1a1"

[font]
size = 16.0

[window]
opacity = 0.65
title = "alacritty"

[window.padding]
x = 10
y = 5
#+end_src
* Zsh
** zshrc
#+begin_src conf :tangle ~/.config/zsh/.zshrc
# this file is last of my conf files. for interactive shells,
# meaning it should have behavior and appearance for when
# I've opened an interactive shell window.
# Avoid putting anything time-intensive here.

# variables controlling behaviour
export HISTFILE=~/.config/zsh/histfile
export HISTSIZE=1000
export SAVEHIST=1000

# variables controlling appearance
# export PS1=$'\033[36m——————————————————————
# \033[37m[\033[34m%n %~\033[37m]
# \033[36m=> λ\033[37m '
PROMPT="%F{white}[%F{blue}%~%F{white}]
%F{cyan}λ %f"

# show directories in bold light blue
LS_COLORS="di=01;94"

# show symbolic links in cyan
LS_COLORS="${LS_COLORS}:ln=00;36"

# show broken symbolic links in light red
LS_COLORS="${LS_COLORS}:or=00;91"

# show executable files in light green
LS_COLORS="${LS_COLORS}:ex=00;92"

export LS_COLORS

setopt autocd extendedglob nomatch

# dont beep on error
unsetopt beep
bindkey -e
# for vim keybinds. was buggy and probably needs more tweaking somehow
# bindkey -e

# my aliases
alias ls='ls --color=auto'
alias la='ls -la'
alias rmd='rm -rf'
alias cls='clear && ls'
alias yay-clean='yay -Sc'
alias panels='ifuse --documents es.produkt.app.panels /mnt/iphone; thunar /mnt/iphone & disown; thunar ~/media/comics & disown; exit'
alias unpanels='fusermount -u /mnt/iphone'
alias sleepy='systemctl suspend'
alias pi='ssh pi@192.168.1.28'
alias oldie='ssh 192.168.1.167'

alias wifi-list='nmcli -p -f IN-USE,SSID,RATE,BARS,SIGNAL,SECURITY dev wifi list'

alias wifi-con="nmcli --ask dev wifi connect"
alias wifi-restart='sudo systemctl restart NetworkManager'

# command autocompletion
zstyle :compinstall filename '/home/thain/.config/zsh/.zshrc'

autoload -Uz compinit
compinit
#+end_src
** zprofile
#+begin_src conf :tangle ~/.config/zsh/.zprofile
# This file is loaded second (after .zshenv) and is for login shells
# good for exporting environment variables
export PATH=$PATH:"/home/thain/.config/chemacs/doom/bin"
export PATH=$PATH:"/home/thain/.local/bin"
export PATH=$PATH:"/home/thain/.config/shscripts"
#+end_src
** zshenv
#+begin_src conf :tangle ~/.zshenv
#!/usr/bin/env zsh
# this file is for env vars that are available to other programs
# in a zsh session.
# of all of my conf files for zsh, this one is read first.
export ZDOTDIR=/home/thain/.config/zsh

export EDITOR=vim
# export QT_STYLE_OVERRIDE=adwaita-dark
# export QT_QPA_PLATFORMTHEME=gtk2
#+end_src

* Scripts
** PDF
Dump pdf TOC to a csv:
#+begin_src sh :tangle ~/.config/scripts/pdf-dump
#/bin/env sh
# Ask the user for login details
read -p 'Input file: ' input
read -p 'Output csv file: ' output
echo
echo Dumping TOC from $input to output $output...
pdftk $input dump_data output $output
#+end_src
Add pdf TOC from a csv:
#+begin_src sh :tangle ~/.config/scripts/pdf-toc
#!/bin/env sh
# Ask the user for login details
read -p 'Input file: ' input
read -p 'Input csv file: ' csv
read -p 'Output pdf file: ' output
echo
echo Updating TOC of $input to the $csv, outputting to $output...
pdftk $input update_info $csv output $output
#+end_src
** run-or-raise
#+begin_src bash :tangle ~/.config/scripts/run-or-raise
#!/usr/bin/env bash
# arg1: target_class (regexp)
# other args: command

# demo:
# 根据 arg1(window target_class) 来匹配当前运行的程序中有没有匹配的窗口，
# hypr-run-or-raise emacs emacs
# hypr-run-or-raise 'firefox|firefox-esr' firefox

PROG=$( basename "$0" )
float_only=""
floating=""
maximize=""
cd=""
resize=""

TEMP=$( getopt --options mcfh --longoptions maximize,cd,floating,float-only,resize:,help -- "$@" ) || exit 1
eval set -- "$TEMP"

for i in "$@"; do
    case "$i" in
        -h|--help)
            echo "Usage: $PROG OPTIONS target [runstring]"
            echo
            echo "Give focus to a program based on window class. If we can't give focus to something with that window class, then exec 'runstring'" |fmt
            echo
            echo "OPTIONS"
            echo "-f|--float-only  只在 target_floating 窗口中寻找匹配的 target"
            exit 0
            ;;
        -c|--cd*)
            cd="set"
            shift
            ;;

        -m|--maximize*)
            maximize="set"
            shift
            ;;
        --floating*)
            # 将目标窗口转成floating
            floating="true"
            shift
            ;;
        -f|--float-only*)
            # 只匹配当前是floating 的
            float_only="set"
            shift
            ;;
        --resize*)
            resize="$2"
            shift
            shift
            ;;

    esac
done

shift

# $target= app_id for wayland or target_class for x11
target=$1
# 转成小写
# target=`echo $target|tr '[:upper:]' '[:lower:]'`
# 获取除第 1 个参数外的所有参数
shift 1
cmd="$@"
#
if [ -n "$float_only" ]; then
    # only match floating app
    target_appinfo=`hyprctl clients -j | jq -rc '.[] | select((.class  | test("'"$target"'"; "i")) and (.floating == true) )'`
else
    # make the target floating
    if [ "$floating" == "true" ]; then
        # target_appinfo=`hyprctl clients -j | jq -rc '.[] | select((.class  | test("'"$target"'"; "i")) and (.floating == true) )'`
        # 优先匹配floating 的
        target_appinfo=`hyprctl clients -j | jq -rc '.[] | select((.class  | test("'"$target"'"; "i")) and (.floating == true) )'`
        if [ -z "$target_appinfo" ]; then
            target_appinfo=`hyprctl clients -j | jq -rc '.[] | select((.class |test("'"$target"'"; "i")))'`
        fi
    else
        target_appinfo=`hyprctl clients -j | jq -rc '.[] | select((.class |test("'"$target"'"; "i")))'`
    fi
fi
if [ ! "$target_appinfo" ]; then
    # if app not found ,run the cmde
    if echo "$cmd" | grep -q " "; then
        sh -c "$cmd" &
    else
        $cmd &
    fi
    sleep 0.3
    # 如果期望新创建的窗口是floating,则尝试将期转成floating
    if [ "$floating" == "true" ]; then
        if [ -n "$float_only" ]; then
            target_appinfo=`hyprctl clients -j | jq -r '.[] | select((.class  | test("'"$target"'"; "i")) and (.floating == true) )'`
        else
            target_appinfo=`hyprctl clients -j | jq -r '.[] | select((.class |test("'"$target"'"; "i")))'`
        fi
        target_floating=`echo $target_appinfo|jq -r '.floating'|head -n 1`
        if [ "$target_floating" == "false" ]; then
            # 如果目标窗口不是floating,且 有--floating 参数（ 即想让目标窗口以floating的形式展示）
            hyprctl dispatch togglefloating address:${target_addr}
            hyprctl dispatch centerwindow
        fi
    fi
else
    # frontappinfo=`hyprctl clients -j | jq -r '.[] |select(.focused)'`
    front_app=`hyprctl activewindow -j`
    # front_class=`echo $front_app|jq -r '.class'`
    front_addr=`echo $front_app|jq -r '.address'`
    front_floating=`echo $front_app|jq -r '.floating'`
    front_fullscreen=`echo $front_app|jq -r '.fullscreen'`

    front_ws_name=`echo $front_app|jq -r '.workspace.name'`
    # jq 的(.app_id // "") 表示取 app_id 若无此字段则为空串
    # target_class=`echo $target_appinfo|jq -r '.class'|head -n 1`
    target_addr=`echo $target_appinfo|jq -r '.address'|head -n 1`
    target_floating=`echo $target_appinfo|jq -r '.floating'|head -n 1`
    if [  "$front_addr" != "$target_addr" ]; then
        # 如果当前窗口是special 的window，则先隐藏之,以免其遮挡聚焦后的窗口
        if [[ "$front_ws_name" == *"special"* ]]; then
            hyprctl dispatch "togglespecialworkspace"
        fi
        # 如果当前窗口是floating，则将其move 到special workspace,以免其遮挡聚焦后的窗口
        if [[ "$front_floating" == "true" ]]; then
            hyprctl dispatch "movetoworkspacesilent special"
        fi

        if [[ "$target_floating" == "true" || "$floating" == "true" ]]; then
            # 如果当前窗口是fullscreen，则将其恢复
            if [ "$front_fullscreen" == "true" ]; then
                hyprctl dispatch "fullscreen"
            fi
            # move window to current ws
             # hyprctl keyword animations:enabled 0
             hyprctl dispatch "movetoworkspacesilent e+0,address:${target_addr}"
             hyprctl dispatch "focuswindow address:${target_addr}"
             if [[ "$floating" = "true" && "$target_floating" = "false" ]]; then
                 # 如果目标窗口不是floating,且 有--floating 参数（ 即想让目标窗口以floating的形式展示）
                 hyprctl dispatch togglefloating address:${target_addr}
                 hyprctl dispatch centerwindow
                 # resize 有bug
                 # hyprctl dispatch resizeactive "$resize"
             fi

             # hyprctl keyword animations:enabled 1
            if [ $maximize ]; then
                hyprctl dispatch "fullscreen 1"
            fi
        else
            hyprctl dispatch "focuswindow address:${target_addr}"
        fi
    else
        if [[ "$front_ws_name" == *"special"* ]]; then
            # hide 当前special workspace
            hyprctl dispatch "togglespecialworkspace"
        elif [ "$target_floating" == "true" ]; then
            hyprctl dispatch "movetoworkspacesilent special"
        # else
        #     hyprctl dispatch "focuscurrentorlast"
        fi
    fi
fi
#+end_src
