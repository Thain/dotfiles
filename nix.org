#+title: Nix Configuration
 #+FILETAGS: :config:nix:


* Inbox
** Learning
- https://github.com/humancalico/nix-learning
- https://zero-to-nix.com/
- https://www.zombiezen.com/blog/2021/12/nix-from-the-ground-up/
- https://christine.website/talks/nixos-pain-2021-11-10/
** Other people's dots
- https://github.com/kjhoerr/dotfiles
- https://github.com/quinn-dougherty/declare/tree/main/machines/laptop
- https://github.com/cwestpha/Nix
- https://grahamc.com/blog/nixos-on-framework/
** N some sort of greeter
** T fingerprint scanner
- [[https://community.frame.work/t/tracking-fingerprint-scanner-compatibility-with-linux-ubuntu-fedora-etc/1501/380][fingerprint scanner]]
- https://sbulav.github.io/nix/nix-fingerprint-authentication/
- [[https://www.reddit.com/r/NixOS/comments/1adrzxu/setting_up_authentication_manager_polkit/][polkit]]
** T better fan control
[[https://github.com/mdvmeijer/fw-fanctrl-nix?tab=readme-ov-file][better fan control]]
** T implement powertop
** T make syncthing declarative
** T make doom emacs setup declarative
** N kmonad layer indicator (waybar)
* Frontmatter
see https://search.nixos.org/options or the NixOS manual (~nixos-help~).
#+begin_src nix :tangle ~/.config/nix/configuration.nix
{ stdenv, config, lib, pkgs, ... }:

{
  imports =
    [
      <nixos-hardware/framework/13-inch/12th-gen-intel>
      # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # networking.hostName = "nixos"; # Define your hostname.
  # Pick only one of the below networking options.
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Europe/Amsterdam";

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  #   useXkbConfig = true; # use xkb.options in tty.
  # };

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  programs.zsh.enable = true;

  # my desktop manager :)
  programs.hyprland = {
    enable=true;
    xwayland.enable = true;
  };
 #+end_src
* LaTeX
#+begin_src nix :tangle ~/.config/nix/mytex.nix
{ stdenv }:

stdenv.mkDerivation rec {
  name = "mytex";
  pname = "mytex";
  tlType = "run";

  src = /home/thain/.config/latex;
  # buildInputs = [ unzip ];

  # Multiple files problem
  # unpackPhase = ''
  #   mkdir tudscr
  #   cd tudscr
  #   unzip $src
  # '';

  #dontBuild = true;

  installPhase = ''
    mkdir -p $out/tex/latex
    ln -s /home/thain/.config/latex/quiver.sty $out/tex/latex
    ln -s /home/thain/.config/latex/thain.sty $out/tex/latex
    ln -s /home/thain/.config/latex/tufte.bst $out/tex/latex
    ln -s /home/thain/.config/latex/tufte-book.cls $out/tex/latex
    ln -s /home/thain/.config/latex/tufte-handout.cls $out/tex/latex
    ln -s /home/thain/.config/latex/tufte-common.def $out/tex/latex
  '';

  #meta = {
  #  branch = "3";
  #  platforms = stdenv.lib.platforms.unix;
  #};
}
#+end_src
* Framework hardware
#+begin_src nix
services.fwupd.enable = true;
#+end_src
add and update the nixos-hardware nixos “channel”:
: sudo nix-channel --add https://github.com/NixOS/nixos-hardware/archive/master.tar.gz nixos-hardware
: sudo nix-channel --update
my framework string:
: <nixos-hardware/framework/12th-gen-intel>
add $YOUR_FRAMEWORK_STRING in configuration.nix:
: imports = [
:  <nixos-hardware/framework/12th-gen-intel>
:  ./hardware-configuration.nix
: ];
see if this is working…

force set the new changes:
: sudo nixos-rebuild switch --upgrade
reboot
* Packages
see https://search.nixos.org/packages
#+begin_src nix :tangle ~/.config/nix/configuration.nix
  nixpkgs.config.allowUnfree = true;
  nix.nixPath=[ "nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixos/nixpkgs:nixos-config=/home/thain/.config/nix/configuration.nix" ];

  environment.systemPackages = with pkgs; [
    # --- debugging area
    # ---

    vim
    brave
    alacritty
    git
    rsync
    zsh
    emacs29-pgtk ripgrep fd

    # --- desktop
    hyprland hyprpaper
    fuzzel
    waybar
    mako
    xdg-utils
    xfce.thunar

    # --- cd ripping
    rubyripper vorbis-tools flac ffmpeg cdrdao

    gcc clang
    zip unzip
    gnupg
    which
    wget
    udisks udiskie
    gparted exfatprogs
    #ifuse

    bluez
    powertop
    htop-vim
    #font-manager

    brightnessctl
    playerctl
    grim slurp
    pamixer
    pavucontrol
    clipman wl-clipboard

    # --- media
    syncthing
    jellyfin-media-player
    nextcloud-client
    libreoffice-still
    vlc
    obs-studio

    # --- communication
    telegram-desktop
    signal-desktop
    discord
    zoom-us

    # --- eduroam stuff
    # python3
    # python311Packages.dasbus
    # python311Packages.pyopenssl
    # openssl
    ghc

    # --- LaTeX
    (texlive.combine {
        inherit (texlive)
        scheme-medium
        texdoc
        tikz-cd
        enumitem
        csquotes
        cjk
        # tufte things
        sauerj xifthen ifmtarg hardwrap catchfile titlesec changepage paralist placeins
        ;
        mytex.pkgs = [ (pkgs.callPackage (import ./mytex.nix) {}) ];
    })

    haskellPackages.kmonad
    pandoc
    sioyek

    qbittorrent
    mullvad
  ];

#+end_src
* System services
#+begin_src nix :tangle ~/.config/nix/configuration.nix
  # Enable sound.
  sound.enable = true;

  services = {
    pipewire = {
      enable = true;
      audio.enable = true;
      pulse.enable = true;
      alsa = {
        enable = true;
        support32Bit = true;
      };
     jack.enable = true;
     };
  };
  # hardware.pulseaudio.enable = true;
  hardware.bluetooth.enable = true; # enables support for Bluetooth
  hardware.bluetooth.powerOnBoot = true; # powers up Bluetooth on boot

  services.openssh.enable = true;
  services.mullvad-vpn.enable = true;
  services.blueman.enable = true;
  services.udisks2.enable = true;


  systemd.services.kmonad = {
     enable = true;
     description = "Kmonad keyboard configuration";
     serviceConfig = {
       ExecStart = "/run/current-system/sw/bin/kmonad /home/thain/.config/kmonad.kbd";
     };
     wantedBy = [ "default.target" ];
  };

  services = {
    syncthing = {
        enable = true;
        user = "thain";
        dataDir = "/home/thain/documents";
        configDir = "/home/thain/.config/syncthing";
    };
  };
#+end_src
* Users
#+begin_src nix :tangle ~/.config/nix/configuration.nix
  # Define a user account. Don't forget to set a password with ‘passwd’.
  # users.mutableUsers = false;
  users.users.thain = {
    isNormalUser = true;
    home = "/home/thain";
    shell = pkgs.zsh;
    description = "Liam Chung";
    extraGroups = [ "wheel" "networkmanager" ];
    #openssh.authorizedKeys.keys = [ "ssh-dss ........... thain..." ];
  };
#+end_src
* Fonts
#+begin_src nix :tangle ~/.config/nix/configuration.nix
  fonts.packages = with pkgs; [
    noto-fonts
    noto-fonts-cjk
    noto-fonts-emoji
    font-awesome
    #emacs-all-the-icons-fonts
    #jetbrains-mono
    #roboto-mono
    (nerdfonts.override { fonts = [ "FiraCode" ]; })
    #liberation_ttf
    #fira-code
    #fira-code-symbols
    #mplus-outline-fonts.githubRelease
    #dina-font
    #proggyfonts
  ];
#+end_src
* State Version
#+begin_src nix :tangle ~/.config/nix/configuration.nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # The first version of NixOS installed on this machine,
  # used to maintain compatibility with app data (e.g. databases) created on older NixOS versions.
  # NEVER change this value after the initial install, for any reason,
  # even if you've upgraded your system to a new NixOS release.
  system.stateVersion = "23.11"; # Did you read the comment?
}
#+end_src

