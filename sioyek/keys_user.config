# ---------- NAVIGATION AND ZOOM ----------

goto_beginning gg   # start of doc
goto_end G          # end of doc

# Opens a prompt to enter page number and jump to that page
# goto_page_with_page_number <home>

## Goto left/right/bottom/top side of the page
#goto_left <unbound>
#goto_right <unbound>
#goto_top_of_page <unbound>
#goto_bottom_of_page <unbound>

# Goto left/right side of the page ignoring white margins
goto_left_smart gh
goto_right_smart gl

# Movement (can be prefixed with a number)
# move_down           <down>
# move_up             <up>
move_left           <right>
move_right          <left>

screen_down J
screen_up K

# Goto the next/prev chapter
next_chapter gc
prev_chapter gC

# Open table of contents.
goto_toc t

# Zoom
zoom_in  =
fit_to_page_width 0
zoom_out -

# Rotate document
rotate_clockwise <C-r>
rotate_counterclockwise <C-R>

# Automatically set the zoom level and horizontal offset such that the current page is centered horizontally and
# it fills the screen width
fit_to_page_width W
# Same as fit_to_page_with but ignores page margins
fit_to_page_width_smart w

## Similar to fit_to_page_width, but for height
fit_to_page_height H

## Similar to fit_to_page_width_smart but for height
fit_to_page_height_smart  h

# Open a file from pwd
open_document_embedded_from_current_path o
# Open a file from root
open_document_embedded O
# Open a recent file
open_prev_doc <C-o>

## Opens the last document opened is sioyek. It is useful when you want to quickly toggle between two documents
#open_last_document <unbound>

## Keyboard shortcut to enter visual mark mode (instead of right clicking)
enter_visual_mark_mode V
close_visual_mark B

# Command the move the visual mark to the next/previous line
# these keys only work when a visual mark is set (by right clicking or using `visual_mark_under_cursor` command)
move_visual_mark_up k
move_visual_mark_down j
move_visual_mark_up <up>
move_visual_mark_down <down>

# ---------- SEARCH ----------

# Search the document.
# you can specify a page range to search:
# example: /<110,135>something          (searches pages 110 to 135 (inclusive) for 'something')
search <C-f>
search /

# Searches the current chapter. This is essentially the same as search but the range prefix is autofilled
# with the range of the current lowest level subchapter.
chapter_search c<C-f>
chapter_search c/

# navigate search results, can be number prefixed
next_item <C-n>
previous_item <C-N>

overview_next_item n
overview_prev_item N
goto_overview ;

# ---------- BOOKMARKS ----------
# Add a bookmark in the current location (opens a text input where you can specify the bookmark text)
add_bookmark b
delete_bookmark db

# Open bookmarks menu of the current document.
goto_bookmark gb

# Open bookmarks menu of all documents.
goto_bookmark_g gB

# ---------- MISC ----------

# Copy selected text
copy <C-c>

toggle_fullscreen <f11>

# Toggles whether we highlight pdf links or not
toggle_highlight <f1>

# open command line
command :

## Perform a synctex search under the mouse cursor
synctex_under_cursor s

# In visual scroll mode, create an overview to/go to/portal to the definition in highlighted line
overview_definition l
goto_definition <C-]>
portal_to_definition ]

# In presentation mode, we fit the pages to screen and movement keys move entire pages
toggle_presentation_mode <f5>

## Quit sioyek
quit q

# Open PDF links using keyboard
open_link f

# Select text using keyboard
keyboard_select v

## Reload sioyek window
reload r

## Open overview window using keyboard
#keyboard_overview <unbound>

## If the preview is not correct, jump to the next preview
#next_preview <C-n>

## If the preview is not correct, jump to the previous preview
#previous_preview <C-N>

## Jump to the location of the current overview
#goto_overview <unbound>

## Create a portal to the location of the current overview
#portal_to_overview <unbound>

## Center the window on selected text
#goto_selected_text <unbound>

## Focus the visual mark on the text matching the given string (useful when extensions want to focus on a text)
#focus_text <unbound>

## Smart jump to the location under mouse cursor
#smart_jump_under_cursor <unbound>
## Open overview window to the location under mouse cursor
#overview_under_cursor <unbound>
## Set a visual mark under mouse cursor
#visual_mark_under_cursor <unbound>
## Close the overview window
#close_overview <unbound>
## Exit visual mark mode
#close_visual_mark <unbound>


# ---------- MARKS ----------

set_mark m
goto_mark '

# ---------- HIGHLIGHTS ----------
# You can select a piece of text and press the `add_highlight` shortcut followed by a symbol (a character from a-z) to highlight
# the text
#add_highlight h
## Goto highlights of current document
#goto_highlight gh
## Goto highlights of all documents
#goto_highlight_g gH
## Left click on a highlight and then press the `delete_highlight` shortcut to delete it.
#delete_highlight dh

# Sets the highlight type to be used for other operations (the default highlight type is 'a')
#set_select_highlight_type

## Same as `add_highlight` but uses the current selected highlight type as the type of highlight
#add_highlight_with_current_type <unbound>

## Toggle select highlight mode. In select highlight mode, all text selected using mouse will automatically be highlighted
## with highlight type set using `set_select_highlight_type`
#toggle_select_highlight <unbound>

# Goto next/previous highlight in current document
goto_next_highlight gnh
goto_prev_highlight gNh

## Goto next/previous highlight of the current selected highlight type
#goto_next_highlight_of_type <unbound>
#goto_prev_highlight_of_type <unbound>
#

# ---------- PORTALS ----------
# If we are in default state, goto portal state with the current location in document as the portal source
# if we are already in the portal state, create the portal with the current location as destination.
portal p

# Delete the portal with the closest source to current location
delete_portal dp

# Goto the position of the portal with the closest source to current location
goto_portal gp
goto_portal <tab>

# Similar to goto_portal, except when prev_state is called, the destination of the portal is update to be the state
# on which prev_state is called
edit_portal P
edit_portal <S-<tab>>

# Open/Close the helper window for portals
toggle_window_configuration <f12>

## open/close helper window
#toggle_one_window <unbound>

