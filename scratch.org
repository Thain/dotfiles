#+title: My Emacs from Scratch Configuration
#+property: header-args:emacs-lisp :tangle ~/.config/chemacs/scratch/init.el
#+FILETAGS: :config:emacs:scratch:

My attempt to build a nice-to-use Emacs Configuration from scratch.

* The Plan
** Phase -1: Doing some reading
*** Basics
- generally helpful [[https://www.reddit.com/r/emacs/comments/qa6tgk/your_first_taste_of_emacs_the_beginners_guide_i/?utm_source=share&utm_medium=web2x&context=3][reddit thread]]
- nic rougier's [[https://github.com/rougier/nano-emacs][nano emacs]]
- nic rougier's [[https://github.com/rougier/elegant-emacs][elegant emacs]]
- [[https://github.com/Lambda-Emacs/lambda-emacs][lambda emacs]]
- emacs [[https://github.com/bbatsov/prelude][prelude]] (many files)
*** Packages
- ido (alternatives, vertico, helm, ivy? or company?)
- [[https://github.com/radian-software/straight.el][straight.el]]
** Phase 1: Core functionalities
*** yasnippet
- auto-yasnippet
- set up file templates and some snippet packs
*** lang support
- emacs lisp
- haskell +lsp
- json
** Phase 2: Convenience
*** Modeline
i like doom's, lambda-line, and nano-modeline
*** Terminal
have to revisit the question of which is best
*** Dired
- all-the-icons-dired
- diff-hl
- diredfl
- dired-rsync
- fd-dired
- ranger
*** Adaptive Wrap
*** which-key
*** helpful
*** persp-mode (workspaces)
*** org round 2
- fancy priorities
- org noter
- toc org
- org cliplink
- org babel async
** Phase 3: Back to Normal
*** emms
*** mu4e
*** dashboard
*** hl-todo
*** calfw (calendar)
or maybe reconsider which cal app i use?
- calfw-org
- org-gcal
*** evil round 2
- evil-exchange
- evil-surround
  - evil-embrace
- evil-easymotion
- evil-escape
- evil-lion
- evil-numbers
- evil-quick-diff
- evil-commenter
** Phase 4: Going Deeper
*** a tree thing
neotree or treemacs?
*** projectile
*** emacs everywhere
this shit is wild
see [[https://github.com/tecosaur/emacs-everywhere][here]]
*** vertico
read [[https://www.emacswiki.org/emacs/Vertico][here]]
*** company
read about it [[https://company-mode.github.io/][here]]
*** flycheck
*** counsel
*** evil round 3
- evil-args
- evil-indent-plus
- evil-vimish-fold
- vimish-fold too? do i need that?
- evil-textobj-anyblock
- evil-visualstar
- exato
*** org round 3
- roam
- journal
- htmlize
- ox pandoc
- ox clip
- org download
* Other Configs
** Better Defaults
- ~ibuffer~: list the open buffers. i'd like to make it look better
Do i need these variables set? what do they do?
- ediff-window-setup-function 'ediff-setup-windows-plain
- apropos-do-all t
- mouse-yank-at-point t
- visible-bell nil
- frame-inhibit-implied-resize t
- load-prefer-newer t
- custom-file (expand-file-name "custom.el" user-emacs-directory))
- column-number-mode
- sentence-end-double-space nil
- Parenthetical Editing
  - paredit
  - rainbow delimiters
  - show-paren-mode
** Emacs for Vimmers
*** WAIT Defaults
#+begin_src emacs-lisp
;; Show empty lines. Why?
;; .. without this you can't tell if there are blank lines at the end of the file.
;(setq-default indicate-empty-lines t)

;; Highlight inactive windows. Why?
;; .. to keep the selection region when changing windows (when evil-mode is disabled).
;(setq highlight-nonselected-windows t)


;; Don't show buffer list on startup. Why?
;; .. buffer switching gets in the way, you can manually switch between them.
;(setq inhibit-startup-buffer-menu t)

;; Don't put two spaces after full-stop. Why?
;; .. one space after a full-stop is sufficient in most documentation & comments.
;(setq sentence-end-double-space nil)
#+end_src
*** WAIT Editing options
#+begin_src emacs-lisp
;; Undo
;; ====

;; Don't group undo steps. Why?
;; .. without this is groups actions into a fixed number of steps which feels unpredictable.
;(fset 'undo-auto-amalgamate 'ignore)

;; Indentation
;; ================

;; yes, both are needed!
;(setq default-tab-width 4)
;(setq tab-width 4)
;(setq default-fill-column 80)
;(setq fill-column 80)
;(setq-default evil-indent-convert-tabs nil)
;(setq-default indent-tabs-mode nil)
;(setq-default tab-width 4)
;(setq-default evil-shift-round nil)
#+end_src
*** WAIT packages
**** hl-prog-extra
#+begin_src emacs-lisp
;; Highlight terms in code-comments such as TODO, FIXME, URL's & email. Why?
;; .. these are common conventions in software that it's useful to highlight them.
;(use-package hl-prog-extra
;  :commands (hl-prog-extra-mode)
;  :init (add-hook 'prog-mode-hook #'hl-prog-extra-mode))
#+end_src
**** evil-numbers
#+begin_src emacs-lisp
;; Use evil numbers to increment & decrement. Why?
;; .. evil-mode doesn't include this VIM functionality.
; (use-package evil-numbers)
#+end_src
**** evil-surround
#+begin_src emacs-lisp
;; Perform actions on surrounding characters. Why?
;; .. while not part of VIM, it's a useful & common package for developers.
;(use-package evil-surround
;  :demand t
;  :config
;  ;; Initialize.
;  (global-evil-surround-mode 1))
#+end_src
**** which-key
#+begin_src emacs-lisp
;; Prompt for available keys after some delay. Why?
;; .. useful to see available keys after some delay, especially for evil-leader key.
;(use-package which-key
;  :demand t
;  :config
;  ;; Initialize.
;  (which-key-mode))
#+end_src
**** Ivy
#+begin_src emacs-lisp
;; Ivy completion. Why?
;; .. makes completing various prompts for input much more friendly & interactive.
;(use-package ivy
;  :demand t
;  :config
;  (ivy-mode)
;
;  ;; Always show half the window height. Why?
;  ;; .. useful when searching through large lists of content.
;  (setq ivy-height-alist `((t . ,(lambda (_caller) (/ (frame-height) 2)))))
;
;  ;; VIM style keys in ivy (holding Control).
;  (define-key ivy-minibuffer-map (kbd "C-j") 'next-line)
;  (define-key ivy-minibuffer-map (kbd "C-k") 'previous-line)
;
;  (define-key ivy-minibuffer-map (kbd "C-h") 'minibuffer-keyboard-quit)
;  (define-key ivy-minibuffer-map (kbd "C-l") 'ivy-done)
;
;  ;; open and next
;  (define-key ivy-minibuffer-map (kbd "C-M-j") 'ivy-next-line-and-call)
;  (define-key ivy-minibuffer-map (kbd "C-M-k") 'ivy-previous-line-and-call)
;
;  (define-key ivy-minibuffer-map (kbd "<C-return>") 'ivy-done)
;
;  ;; so we can switch away
;  (define-key ivy-minibuffer-map (kbd "C-w") 'evil-window-map))
#+end_src
**** Company
#+begin_src emacs-lisp
;; Use for auto-complete. Why?
;; .. saves typing, allows multiple back-ends based on the current language/mode.
;(use-package company
;  :commands (company-complete-common company-dabbrev)
;  :config
;  (global-company-mode)
;
;  ;; Increase maximum number of items to show in auto-completion. Why?
;  ;; .. seeing more at once gives you a better overview of your options.
;  (setq company-tooltip-limit 40)
;
;  ;; Don't make abbreviations lowercase or ignore case. Why?
;  ;; .. many languages are case sensitive, so changing case isn't helpful.
;  (setq company-dabbrev-downcase nil)
;  (setq company-dabbrev-ignore-case nil)
;
;  ;; Key-map: hold Control for VIM motion. Why?
;  ;; .. we're already holding Control, allow navigation at the same time.
;  (define-key company-active-map (kbd "C-j") 'company-select-next-or-abort)
;  (define-key company-active-map (kbd "C-k") 'company-select-previous-or-abort)
;  (define-key company-active-map (kbd "C-l") 'company-complete-selection)
;  (define-key company-active-map (kbd "C-h") 'company-abort)
;  (define-key company-active-map (kbd "<C-return>") 'company-complete-selection)
;
;  (define-key company-search-map (kbd "C-j") 'company-select-next)
;  (define-key company-search-map (kbd "C-k") 'company-select-previous))
#+end_src
**** Swiper
#+begin_src emacs-lisp
;; Use `swiper' for interactive buffer search. Why?
;; .. interactively searching the current buffer can be handy.
;(use-package swiper
;  :commands (swiper)
;  :config
;
;  ;; Go to the start of the match instead of the end. Why?
;  ;; .. allows us to operate on the term just jumped to (look up reference for e.g.)
;  (setq swiper-goto-start-of-match t))
#+end_src
**** Counsel
#+begin_src emacs-lisp
;;; Use counsel for project wide searches. Why?
;;; .. interactive project wide search is incredibly useful.
;(use-package counsel
;  :commands (counsel-git-grep counsel-switch-buffer))
#+end_src
**** Find file in project
#+begin_src emacs-lisp
;;; Find file in project. Why?
;;; .. interactively narrowing down other files in the project is very useful.
;(use-package find-file-in-project
;  :commands (find-file-in-project))
#+end_src
**** diff-hl
#+begin_src emacs-lisp
;;; Use `diff-hl'. Why?
;;; .. shows lines you have modified from the last commit.
;(use-package diff-hl
;  :demand t
;  :config (global-diff-hl-mode))
;
;;; Highlights numbers. Why?
;;; .. Emacs doesn't do this by default, use a package.
;(use-package highlight-numbers
;  :hook ((prog-mode) . highlight-numbers-mode))
;
;;; Scale all text. Why?
;;; .. it's useful sometimes to globally zoom in all text.
;(use-package default-font-presets
;  :commands (default-font-presets-scale-increase
;             default-font-presets-scale-decrease
;             default-font-presets-scale-reset)
;  :demand t)
#+end_src
*** WAIT Display Options
#+begin_src emacs-lisp
;; Show line numbers. Why?
;; Helpful to give context when reading errors & the current line is made more prominent.
;(global-display-line-numbers-mode 1)

;; Even when narrowing, show global line numbers. Why?
;; .. because these are often referenced in external messages.
;(setq-default display-line-numbers-widen t)

;; Show the column as well as the line. Why?
;; .. some compiler errors show the column which is useful to compare.
;(setq column-number-mode t)

;; Disable word-wrap. Why?
;; .. confusing for reading structured text, where white-space can be significant.
;(setq-default truncate-lines t)
#+end_src
*** WAIT File Formats
#+begin_src emacs-lisp
;;; Options for generic modes. Why?
;;; .. this avoids duplicating checks for all programming and text modes.
;(add-hook
; 'after-change-major-mode-hook
; (lambda ()
;   (cond
;    ((derived-mode-p 'prog-mode)
;     (flyspell-prog-mode))
;    ((derived-mode-p 'text-mode)
;     (flyspell-mode)))))
;
;
;;; ------
;;; Markup
;;; ------
;
;(add-hook 'org-mode-hook
;  (lambda ()
;    (setq-local fill-column 120)
;    (setq-local tab-width 2)
;    (setq-local evil-shift-width 2)
;    (setq-local indent-tabs-mode nil)
;
;    (setq-local ffip-patterns '("*.org"))))
;
;;; ---------
;;; Scripting
;;; ---------
;
;(add-hook 'emacs-lisp-mode-hook
;  (lambda ()
;    (setq-local fill-column 120)
;    (setq-local tab-width 2)
;    (setq-local evil-shift-width 2)
;    (setq-local indent-tabs-mode nil)
;
;    (setq-local ffip-patterns '("*.el"))
;
;    ;; Don't delimit on dashes or underscores. Why?
;    ;; .. makes searching for variable names inconvenient.
;    (modify-syntax-entry ?- "w")
;    (modify-syntax-entry ?_ "w")))
;
;(add-hook 'python-mode-hook
;  (lambda ()
;    (setq-local fill-column 80)
;    (setq-local tab-width 4)
;    (setq-local evil-shift-width 4)
;    (setq-local indent-tabs-mode nil)
;
;    (setq-local ffip-patterns '("*.py"))))
;
;;; -----
;;; Shell
;;; -----
;
;(add-hook 'sh-mode-hook
;  (lambda ()
;    (setq-local fill-column 120)
;    (setq-local tab-width 4)
;    (setq-local evil-shift-width 4)
;    (setq-local indent-tabs-mode nil)
;
;    (setq-local ffip-patterns '("*.sh"))))


#+end_src
*** WAIT Keymap
#+begin_src emacs-lisp
;; -----------
;; Global Keys
;; ===========

;; Control +/- or mouse-wheel to zoom. Why?
;; .. this is a common shortcut for web-browsers that doesn't conflict with anything else.
;(global-set-key (kbd "C-=") 'default-font-presets-scale-increase)
;(global-set-key (kbd "C--") 'default-font-presets-scale-decrease)
;(global-set-key (kbd "C-0") 'default-font-presets-scale-reset)
;
;(global-set-key (kbd "<C-mouse-4>") 'default-font-presets-scale-increase)
;(global-set-key (kbd "<C-mouse-5>") 'default-font-presets-scale-decrease)
;
;;; For PGTK (for some reason different names are used).
;(global-set-key (kbd "<C-wheel-up>") 'default-font-presets-scale-increase)
;(global-set-key (kbd "<C-wheel-down>") 'default-font-presets-scale-decrease)
;
;
;;; --------------
;;; Evil Mode Keys
;;; ==============
;
;;; Use secondary selection in insert mode, Why?
;;; .. this is handy for quick middle mouse copy/paste while in insert mode.
;(define-key evil-insert-state-map (kbd "<down-mouse-1>") 'mouse-drag-secondary)
;(define-key evil-insert-state-map (kbd "<drag-mouse-1>") 'mouse-drag-secondary)
;(define-key evil-insert-state-map (kbd "<mouse-1>") 'mouse-start-secondary)
;;; De-select after copy, Why?
;;; .. allows quick select-copy-paste.
;(define-key evil-insert-state-map (kbd "<mouse-2>")
;  (lambda (click)
;    (interactive "*p")
;    (when (overlay-start mouse-secondary-overlay)
;      (mouse-yank-secondary click)
;      (delete-overlay mouse-secondary-overlay))))
;
;;; VIM increment/decrement keys.
;(define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
;(define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
;
;(define-key evil-visual-state-map (kbd "g C-a") 'evil-numbers/inc-at-pt-incremental)
;(define-key evil-visual-state-map (kbd "g C-x") 'evil-numbers/dec-at-pt-incremental)
;
;;; Auto complete using words from the buffer.
;(define-key evil-insert-state-map (kbd "C-n") 'company-dabbrev)
;;; Comprehensive auto-complete.
;(define-key evil-insert-state-map (kbd "C-SPC") 'company-complete-common)
;
;
;;; ----------------
;;; Evil Leader Keys
;;; ================
;
;;; Example leader keys for useful functionality exposed by packages.
;(with-eval-after-load 'evil
;  (evil-set-leader '(normal) (kbd "<SPC>"))
;
;  ;; Interactive file name search.
;  (evil-define-key 'normal 'global (kbd "<leader>k") 'find-file-in-project)
;  ;; Interactive file content search (git).
;  (evil-define-key 'normal 'global (kbd "<leader>f") 'counsel-git-grep)
;  ;; Interactive current-file search.
;  (evil-define-key 'normal 'global (kbd "<leader>s") 'swiper)
;  ;; Interactive open-buffer switch.
;  (evil-define-key 'normal 'global (kbd "<leader>b") 'counsel-switch-buffer))

#+end_src
*** WAIT Custom Vars
#+begin_src emacs-lisp
;; Store custom variables in an external file. Why?
;; .. it means this file can be kept in version control without noise from custom variables.

;(setq custom-file (concat user-emacs-directory "custom.el"))
;(load custom-file 'noerror)
#+end_src
** yay evil emacs
see [[https://github.com/ianyepan/yay-evil-emacs][here]]
* My EFS Config
** Basics
*** Name & Email
Some functionality uses this for identification, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Liam Chung"
      user-mail-address "lwalkerchung@gmail.com")
#+end_src
*** Mode hooks
Require modes and set default modes for file extensions
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pdf\;" . pdf-tools))
#+end_src
*** Performance Improvements
Ensure UTF-8 everywhere
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
#+end_src
no bidirectional text support for performance improvement
#+begin_src emacs-lisp
(setq bidi-display-reordering nil)
#+end_src
backups won't be necessary
#+begin_src emacs-lisp
(setq backup-inhibited t)
(setq auto-save-default nil)
#+end_src
*** UI Tweaks
#+begin_src emacs-lisp
(save-place-mode 1) ; point returns to where it was when you left
(savehist-mode 1) ; save minibuffer history
(show-paren-mode 1) ; when point is on delimiters, highlight the matching delimiter
;(setq show-paren-delay 0)
;(setq blink-matching-paren nil)
;(setq show-paren-highlight-openparen t)
;(setq show-paren-when-point-inside-paren t)

(defalias 'yes-or-no-p 'y-or-n-p) ; just use y or n, no yes or no

;; no menu bar, tool bar, or scroll wheels
(menu-bar-mode -1)
(tool-bar-mode -1)
(tab-bar-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)
(tooltip-mode -1)

(blink-cursor-mode -1)

(setq-default line-spacing 0   ;; line spacing 0 by default, can be 1 or 2
              indent-tabs-mode nil) ;; spaces not tabs

(setq widget-image-enable nil ;; no ugly button for checkboxes
      visible-bell t ;; no sounds
      ring-bell-function 'ignore ;; no sounds
      use-dialog-box nil ; swap out popups for text prompts
      desktop-save-mode t ; save session in desktop for next time
      savehist-additional-variables '(register-alist) ; registers saved on exit
      x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)
      save-interprogram-paste-before-kill t ; save external copies to kill ring
      select-enable-clipboard t  ;; Cut/paste use the system clipboard
      cursor-in-non-selected-windows 'hollow ; keep cursors and highlights in current window
      display-line-numbers-type t ; show line numbers
      require-final-newline t) ; add newline at end of file

;; creating the startup experience
(setq inhibit-startup-screen t
      inhibit-startup-echo-area-message t
      inhibit-startup-message t
      initial-scratch-message nil
      initial-major-mode 'org-mode
      pop-up-windows nil)

;; makes file names unique in a more sensible way.
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; Window Title, include the buffer name & modified status.
(setq-default frame-title-format "%b %& emacs")
#+end_src
Line number fix: when opening file, read number of lines and add width to line number column so there's no shift mid file.
#+begin_src emacs-lisp
(defun display-line-numbers-equalize ()
  (setq display-line-numbers-width (length (number-to-string (line-number-at-pos (point-max))))))
(add-hook 'find-file-hook 'display-line-numbers-equalize)
#+end_src
*** Autocompletion
ido mode is basic autocomplete functionalities
#+begin_src emacs-lisp
(ido-mode t)
(ido-everywhere)
(fido-mode)

(setq ido-enable-flex-matching t) ; flexible string matching in ido
#+end_src

*** Scrolling
#+begin_src emacs-lisp
(setq scroll-margin 2) ;; keep 2 line padding when scrolling

(setq scroll-step 1 ; scroll one line at a time using kbd
      mouse-wheel-scroll-amount '(4 ((shift . 1))) ; mouse scroll lil faster
      mouse-wheel-progressive-speed nil ; don't accelerate scroll
      mouse-wheel-inhibit-click-time nil ; for performance gain
      fast-but-imprecise-scrolling nil ; more responsive scrolling
      jit-lock-defer-time 0) ; ^^

;; Preserve line/column (nicer page up/down). Why?
;; .. avoids having the cursor at the top/bottom edges.
(setq scroll-preserve-screen-position t)
;; Move the cursor to top/bottom even if the screen is viewing top/bottom (for page up/down). Why?
;; .. so pressing page/up down can move the cursor & the view to start/end of the buffer.
(setq scroll-error-top-bottom t)

;; Center after going to the next compiler error. Why?
;; .. don't get stuck at screen edges.
(setq next-error-recenter (quote (4)))
#+end_src
*** Appearance
Basic font and padding settings
#+begin_src emacs-lisp
;; Setting font and internal border width
(set-face-font 'default "Roboto Mono Light 12")
(setq default-frame-alist
      (append (list '(width  . 72) '(height . 40)
                    '(internal-border-width . 24)
                    '(font . "Roboto Mono Light 12"))))

;; internal padding on buffers
(set-frame-parameter (selected-frame)
                     'internal-border-width 24)

;; underline at lower, not baseline
(setq x-underline-at-descent-line t)

;; no fringe / nice glyphs for truncated & wrapped lines
(fringe-mode '(0 . 0))
(defface fallback '((t :family "Fira Code Light"
                       :inherit 'face-faded)) "Fallback")
(set-display-table-slot standard-display-table 'truncation
                        (make-glyph-code ?… 'fallback))
(set-display-table-slot standard-display-table 'wrap
                        (make-glyph-code ?↩ 'fallback))
(set-display-table-slot standard-display-table 'selective-display
                        (string-to-vector " …"))

;; a helper. maybe move later if I end up with a lot of them
;; When we set a face, we take care of removing any previous settings
(defun set-face (face style)
  "Reset a face and make it inherit style."
  (set-face-attribute face nil
   :foreground 'unspecified :background 'unspecified
   :family     'unspecified :slant      'unspecified
   :weight     'unspecified :height     'unspecified
   :underline  'unspecified :overline   'unspecified
   :box        'unspecified :inherit    style))
#+end_src
*** Modeline
#+begin_src emacs-lisp
;; Mode line (this might be slow because of the "☰" that requires substitution)
;; This line below makes things a bit faster
(set-fontset-font "fontset-default"  '(#x2600 . #x26ff) "Fira Code 16")

(define-key mode-line-major-mode-keymap [header-line]
  (lookup-key mode-line-major-mode-keymap [mode-line]))

(defun mode-line-render (left right)
  (let* ((available-width (- (window-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))
(setq-default mode-line-format
     '((:eval
       (mode-line-render
       (format-mode-line (list
         (propertize "☰" 'face `(:inherit mode-line-buffer-id)
                         'help-echo "Mode(s) menu"
                         'mouse-face 'mode-line-highlight
                         'local-map   mode-line-major-mode-keymap)
         " %b "
         (if (and buffer-file-name (buffer-modified-p))
             (propertize "(modified)" 'face `(:inherit shadow)))))
       (format-mode-line
        (propertize "%4l:%2c  " 'face `(:inherit shadow)))))))


;; Comment if you want to keep the modeline at the bottom
(setq-default header-line-format mode-line-format)
(setq-default mode-line-format'(""))


;; Vertical window divider
(setq window-divider-default-right-width 3)
(setq window-divider-default-places 'right-only)
(window-divider-mode)

;; Modeline
(defun set-modeline-faces ()

  ;; Mode line at top
  (set-face 'header-line                                 'bold)
  (set-face-attribute 'header-line nil
                                :underline (face-foreground 'default))
  (set-face-attribute 'mode-line nil
                      :height 10
                      :underline (face-foreground 'default)
                      :overline nil
                      :box nil
                      :foreground (face-background 'default)
                      :background (face-background 'default))
  (set-face 'mode-line-inactive                            'mode-line)

  (set-face-attribute 'cursor nil
                      :background (face-foreground 'default))
  (set-face-attribute 'window-divider nil
                      :foreground (face-background 'mode-line))
  (set-face-attribute 'window-divider-first-pixel nil
                      :foreground (face-background 'default))
  (set-face-attribute 'window-divider-last-pixel nil
                      :foreground (face-background 'default))
  )
#+end_src
** Packages
*** use-package setup
do i use [[https://emacs.stackexchange.com/questions/39121/use-package-init-or-config][init or config]]
#+begin_src emacs-lisp
;; Enable installation of packages from MELPA and GNU.
(with-eval-after-load 'package
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t))

(package-initialize)

;; use-packages is the de-facto package manager, useful to isolate each package's configuration.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; This is only needed once, near the top of the file
(eval-when-compile (require 'use-package))

;; Download automatically. Why?
;; .. convenience, so on first start all packages are installed.
(setq use-package-always-ensure t)
;; Defer loading packages by default. Why?
;; .. faster startup for packages which are only activated on certain modes or key bindings.
(setq use-package-always-defer t)

;; compute statistics to see what packages i'm using
(setq use-package-compute-statistics t)
#+end_src
*** TODO package-utils
Add the ability to upgrade all packages, somehow?
#+begin_src emacs-lisp
(use-package package-utils
  :commands (package-utils-upgrade-all-and-recompile))
#+end_src
*** TODO modeline
**** mood-line
#+begin_src emacs-lisp
;(use-package mood-line
;  :init (mood-line-mode))
#+end_src
**** elegance modeline
#+begin_src emacs-lisp :tangle no
;; this might be slow because of the "☰" that requires substitution)
;; This line below makes things a bit faster
(set-fontset-font "fontset-default"  '(#x2600 . #x26ff) "Fira Code 16")

(define-key mode-line-major-mode-keymap [header-line]
  (lookup-key mode-line-major-mode-keymap [mode-line]))

(defun mode-line-render (left right)
  (let* ((available-width (- (window-width) (length left) )))
    (format (format "%%s %%%ds" available-width) left right)))
(setq-default mode-line-format
     '((:eval
       (mode-line-render
       (format-mode-line (list
         (propertize "☰" 'face `(:inherit mode-line-buffer-id)
                         'help-echo "Mode(s) menu"
                         'mouse-face 'mode-line-highlight
                         'local-map   mode-line-major-mode-keymap)
         " %b "
         (if (and buffer-file-name (buffer-modified-p))
             (propertize "(modified)" 'face `(:inherit face-faded)))))
       (format-mode-line
        (propertize "%4l:%2c  " 'face `(:inherit face-faded)))))))


;; Comment if you want to keep the modeline at the bottom
(setq-default header-line-format mode-line-format)
(setq-default mode-line-format'(""))


;; Vertical window divider
(setq window-divider-default-right-width 3)
(setq window-divider-default-places 'right-only)
(window-divider-mode)

;; Modeline
(defun set-modeline-faces ()

  ;; Mode line at top
  (set-face 'header-line                                 'face-strong)
  (set-face-attribute 'header-line nil
                                :underline (face-foreground 'default))
  (set-face-attribute 'mode-line nil
                      :height 10
                      :underline (face-foreground 'default)
                      :overline nil
                      :box nil
                      :foreground (face-background 'default)
                      :background (face-background 'default))
  (set-face 'mode-line-inactive                            'mode-line)

  ;; Mode line at bottom
  ;; (set-face 'header-line                                 'face-strong)
  ;; (set-face-attribute 'mode-line nil
  ;;                     :height 1.0
  ;;                     :overline (face-background 'default)
  ;;                     :underline nil
  ;;                     :foreground (face-foreground 'default)
  ;;                     :background (face-background 'face-subtle)
  ;;                     :box `(:line-width 2
  ;;                            :color ,(face-background 'face-subtle)
  ;;                            :style nil))
  ;; (set-face 'mode-line-highlight '(face-popout mode-line))
  ;; (set-face 'mode-line-emphasis  'face-strong)
  ;; (set-face-attribute 'mode-line-buffer-id nil :weight 'regular)
  ;; (set-face-attribute 'mode-line-inactive nil
  ;;                     :height 1.0
  ;;                     :overline (face-background 'default)
  ;;                     :underline nil
  ;;                     :foreground (face-foreground 'face-faded)
  ;;                     :background (face-background 'face-subtle)
  ;;                     :box `(:line-width 2
  ;;                            :color ,(face-background 'face-subtle)
  ;;                            :style nil))


  (set-face-attribute 'cursor nil
                      :background (face-foreground 'default))
  (set-face-attribute 'window-divider nil
                      :foreground (face-background 'mode-line))
  (set-face-attribute 'window-divider-first-pixel nil
                      :foreground (face-background 'default))
  (set-face-attribute 'window-divider-last-pixel nil
                      :foreground (face-background 'default))
  )
#+end_src
*** TODO Org
need to get org started. packages i'll want:
- org-appear
- org-superstar
- olivetti
- evil-org
- org-pdftools
#+begin_src emacs-lisp
(add-hook 'org-cycle-hook
    (lambda (state)
      (when (eq state 'children)
        (setq org-cycle-subtree-status 'subtree))))
#+end_src
*** TODO undo-fu
maybe want to switch this to undo-tree?
#+begin_src emacs-lisp
;; need this for redo
(use-package undo-fu)
#+end_src
*** TODO LaTeX
- evil-tex
#+begin_src emacs-lisp
(setq +latex-viewers '(pdf-tools))

(use-package tex
    :ensure auctex
    :mode
    ("\\.tex\\'" . latex-mode)
    ;:bind
    ;(:map LaTeX-mode-map
    ;      ("C-c C-r" . reftex-query-replace-document)
    ;      ("C-c C-g" . reftex-grep-document))
    :config
    (setq-default TeX-master nil
                  TeX-PDF-mode t)

    (setq TeX-auto-save t
          TeX-save-query nil ; don't prompt for saving the .tex file
          TeX-electric-sub-and-superscript nil
          TeX-parse-self t
          tex-fontify-script nil
          font-latex-fontify-script nil))

;; need latex preview pane
(use-package latex-preview-pane
    :after tex)

(add-hook 'LaTeX-mode-hook (lambda ()
                             (outline-minor-mode 1)
                             (TeX-fold-mode 1)
                             (TeX-fold-buffer)))
#+end_src
*** TODO PDFs
Docs seen [[https://github.com/vedang/pdf-tools][here]]
maybe check out [[https://github.com/cjl8zf/evil-pdf-tools][evil-pdf-tools]]
#+begin_src emacs-lisp
(use-package pdf-tools
;  :hook (pdf-view-midnight-minor-mode)
  :mode  ("\\.pdf\\'" . pdf-view-mode)
  :config
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-view-use-scaling t
;        pdf-annot-activate-created-annotations t
        pdf-view-midnight-invert nil)
)

(add-hook 'pdf-view-mode-hook (lambda ()
                             (save-place-mode 1)
                             (pdf-view-midnight-minor-mode 1)
                             (setq cursor-type nil)
                             ))


(add-hook 'pdf-outline-buffer-mode-hook #'pdf-outline-hook)
(defun pdf-outline-hook ()
  (display-line-numbers-mode -1) ;; don't display line numbers
  (setq left-margin-width 2)     ;;
  (outline-hide-sublevels 1))
#+end_src
*** Theme
Still want to keep looking, but not urgent
#+begin_src emacs-lisp
;(use-package inkpot-theme
;  :demand t
;  :config (load-theme 'inkpot t))

;(use-package kaolin-themes
;  :demand t
;  :config (load-theme 'kaolin-aurora t))

(use-package color-theme-sanityinc-tomorrow
  :demand t
  :config (load-theme 'sanityinc-tomorrow-night t))

;(use-package nord-theme
;  :demand t
;  :config (load-theme 'nord t))

;; need to set the faces for the modeline.
(set-modeline-faces)

; nord
; (setq pdf-view-midnight-colors '("#eceff4" . "#2e3440"))
; tomorrow night
(setq pdf-view-midnight-colors '("#c5c8c6" . "#1d1f21"))
#+end_src
potential themes:
- [[https://github.com/ogdenwebb/emacs-kaolin-themes][kaolin]]
- [[https://emacsthemes.com/themes/zeno-theme.html][zeno]]
- [[https://emacsthemes.com/themes/tomorrow-night-paradise-theme.html][tomorrow night paradise]]
- [[https://github.com/purcell/color-theme-sanityinc-tomorrow][tomorrow night]]
- [[https://www.nordtheme.com/docs/ports/emacs/installation][nord]]
** Keybinds
*** TODO Evil
still need:
- evil-snipe
- vi-tilde-fringe
- evil-goggles, goggles too?
how about:
- [[https://github.com/noctuid/evil-guide#minibuffer][emacs/evil for vim users]]
**** Evil
#+begin_src emacs-lisp
(use-package evil
;  :straight t
  :demand t
;  :hook ((after-init . evil-mode)
;         (prog-mode . hs-minor-mode))
  :hook (after-init . evil-mode)
  :init
  (setq evil-want-keybinding nil
        evil-respect-visual-line-mode t
;        evil-symbol-word-search t
;        evil-ex-search-vim-style-regexp t
;        evil-want-C-u-delete t
;        evil-want-C-u-scroll t
;        hs-minor-mode-map nil
;  (setq evil-magic 'very-magic
        evil-undo-system 'undo-fu
        evil-search-module 'evil-search)
  :config
;  (setq evil-cross-lines t
;        evil-kill-on-visual-paste nil
;        evil-move-beyond-eol t
;        evil-want-C-i-jump t
;        evil-want-fine-undo t
;        evil-v$-excludes-newline t)
;
;  (setq evil-normal-state-cursor  '("DarkGoldenrod2" box)
;        evil-insert-state-cursor  '("chartreuse3" (bar . 2))
;        evil-emacs-state-cursor   '("SkyBlue2" box)
;        evil-replace-state-cursor '("chocolate" (hbar . 2))
;        evil-visual-state-cursor  '("gray" (hbar . 2))
;        evil-motion-state-cursor  '("plum3" box)
  )

(general-define-key
 :keymaps 'normal
; :prefix "SPC"
 "j" 'evil-next-visual-line
 "k" 'evil-previous-visual-line)
#+end_src
**** Evil Collection
#+begin_src emacs-lisp
(use-package evil-collection
  :custom (evil-collection-setup-minibuffer t)
  :init (evil-collection-init))
#+end_src
**** TODO special extra config
#+begin_src emacs-lisp :tangle no
  (progn
    ;; Thanks to `editorconfig-emacs' for many of these
    (defvar evil-indent-variable-alist
      ;; Note that derived modes must come before their sources
      '(((awk-mode c-mode c++-mode java-mode
                   idl-mode java-mode objc-mode pike-mode) . c-basic-offset)
        (groovy-mode . groovy-indent-offset)
        (python-mode . python-indent-offset)
        (cmake-mode . cmake-tab-width)
        (coffee-mode . coffee-tab-width)
        (cperl-mode . cperl-indent-level)
        (css-mode . css-indent-offset)
        (elixir-mode . elixir-smie-indent-basic)
        ((emacs-lisp-mode lisp-mode) . lisp-indent-offset)
        (enh-ruby-mode . enh-ruby-indent-level)
        (erlang-mode . erlang-indent-level)
        (js2-mode . js2-basic-offset)
        (js3-mode . js3-indent-level)
        ((js-mode json-mode) . js-indent-level)
        (latex-mode . (LaTeX-indent-level tex-indent-basic))
        (livescript-mode . livescript-tab-width)
        (mustache-mode . mustache-basic-offset)
        (nxml-mode . nxml-child-indent)
        (perl-mode . perl-indent-level)
        (puppet-mode . puppet-indent-level)
        (ruby-mode . ruby-indent-level)
        (rust-mode . rust-indent-offset)
        (scala-mode . scala-indent:step)
        (sgml-mode . sgml-basic-offset)
        (sh-mode . sh-basic-offset)
        (typescript-mode . typescript-indent-level)
        (web-mode . web-mode-markup-indent-offset)
        (yaml-mode . yaml-indent-offset))
      "An alist where each key is either a symbol corresponding
  to a major mode, a list of such symbols, or the symbol t,
  acting as default. The values are either integers, symbols
  or lists of these.")

    (defun set-evil-shift-width ()
      "Set the value of `evil-shift-width' based on the indentation settings of the
  current major mode."
      (let ((shift-width
             (catch 'break
               (dolist (test evil-indent-variable-alist)
                 (let ((mode (car test))
                       (val (cdr test)))
                   (when (or (and (symbolp mode) (derived-mode-p mode))
                             (and (listp mode) (apply 'derived-mode-p mode))
                             (eq 't mode))
                     (when (not (listp val))
                       (setq val (list val)))
                     (dolist (v val)
                       (cond
                        ((integerp v) (throw 'break v))
                        ((and (symbolp v) (boundp v))
                         (throw 'break (symbol-value v))))))))
               (throw 'break (default-value 'evil-shift-width)))))
        (when (and (integerp shift-width)
                   (< 0 shift-width))
          (setq-local evil-shift-width shift-width))))

    ;; after major mode has changed, reset evil-shift-width
    (add-hook 'after-change-major-mode-hook #'set-evil-shift-width 'append))

  (progn
    (evil-define-text-object evil-pasted (count &rest args)
      (list (save-excursion (evil-goto-mark ?\[) (point))
            (save-excursion (evil-goto-mark ?\]) (1+ (point)))))
    (define-key evil-inner-text-objects-map "P" 'evil-pasted)

    ;; define text-object for entire buffer
    (evil-define-text-object evil-inner-buffer (count &optional beg end type)
      (list (point-min) (point-max)))
    (define-key evil-inner-text-objects-map "g" 'evil-inner-buffer))

  ;; allow eldoc to trigger directly after changing modes
  (eldoc-add-command #'evil-normal-state
                     #'evil-insert
                     #'evil-change
                     #'evil-delete
                     #'evil-replace)

  (add-hook 'evil-normal-state-exit-hook #'evil-ex-nohighlight)

  (general-def 'normal "zf" 'reposition-window)
  (general-def 'insert [remap evil-complete-previous] 'hippie-expand))

#+end_src
**** TODO Evil extras
***** Evil-collection
#+begin_src emacs-lisp :tangle no
(use-package evil-collection
  :straight t
  :hook (after-init . evil-collection-init)
  :init
  (add-hook 'org-agenda-mode-hook
            (lambda () (evil-collection-unimpaired-mode -1))))
#+end_src
***** Evil-owl
#+begin_src emacs-lisp :tangle no
(use-package evil-owl
  :straight t
  :hook (after-init . evil-owl-mode)
  :config
  (add-to-list 'display-buffer-alist
               '("*evil-owl*"
                 (display-buffer-in-side-window)
                 (side . bottom)
                 (window-height . 0.3)))
  (setq evil-owl-idle-delay 0.5))
#+end_src
***** Evil-surround
#+begin_src emacs-lisp :tangle no
(use-package evil-surround
  :straight t
  :hook ((text-mode prog-mode) . evil-surround-mode)
  :config
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (push '(?` . ("`" . "'")) evil-surround-pairs-alist)))
  ;; `s' for surround instead of `subtitute'
  (general-def 'visual evil-surround-mode-map
    "s" 'evil-surround-region
    "S" 'evil-substitute))
#+end_src
*** which-key
#+begin_src emacs-lisp
(use-package which-key
  :hook (after-init . which-key-mode)
  :config
  (setq which-key-idle-delay 0.4
        which-key-max-description-length 32
        which-key-sort-order 'which-key-key-order-alpha)
)
#+end_src
*** Leader
Wrap:
#+begin_src emacs-lisp :noweb yes
(use-package general
;  :straight t
  :after evil
  :config

  (general-define-key
   :states '(normal insert motion emacs)
   :keymaps 'override
   :prefix-map 'tyrant-map
   :prefix "SPC"
   :non-normal-prefix "M-SPC")

  (general-create-definer tyrant-def :keymaps 'tyrant-map)
  (tyrant-def "" nil)
  (general-create-definer despot-def
    :states '(normal insert motion emacs)
    :keymaps 'override
    :major-modes t
    :prefix "SPC m"
    :non-normal-prefix "M-SPC m")
  (despot-def "" nil)

  (general-def universal-argument-map
    "SPC u" 'universal-argument-more)

  (tyrant-def
    <<basic-binds>>
    <<file-binds>>
    <<buffer-binds>>
    <<window-binds>>
    <<help-binds>>
    <<quit-binds>>
  )

  <<org-binds>>
)
#+end_src
**** Core
***** Basics
#+name: basic-binds
#+begin_src emacs-lisp
":"     '("M-x" . execute-extended-command)
";"     '("Eval exp" . pp-eval-expression)
"."     '("Find file" . find-file)
; needs something like vertico
","     '("Switch buffers" . switch-to-buffer)
#+end_src
***** File
#+name: file-binds
#+begin_src emacs-lisp
"f"       (cons "files" (make-sparse-keymap))
"fC"      '("copy-file" . write-file)
"fd"      'delete-current-buffer-file
"fr"      'rename-current-buffer-file
"fs"      'save-buffer
"fS"      'write-file
#+end_src
***** Buffer
#+name: buffer-binds
#+begin_src emacs-lisp
"b"       (cons "buffers" (make-sparse-keymap))
"bb"      'switch-to-buffer
"bB"      'ibuffer
"bd"      'kill-current-buffer
"bm"      'switch-to-messages-buffer
"bs"      'switch-to-scratch-buffer
"bu"      'reopen-killed-buffer
"bx"      'kill-buffer-and-window
#+end_src
***** Window
#+name: window-binds
#+begin_src emacs-lisp
"w"       (cons "windows" (make-sparse-keymap))
"w TAB"   'alternate-window
"w+"      'window-layout-toggle
"wb"      'switch-to-minibuffer-window
"wd"      'delete-window
"wh"      'evil-window-left
"wj"      'evil-window-down
"wk"      'evil-window-up
"wl"      'evil-window-right
"wt"      'toggle-current-window-dedication
"ws"      'split-window-vertically-and-focus
"wv"      'split-window-horizontally-and-focus
#+end_src
***** Help
#+name: help-binds
#+begin_src emacs-lisp
"h"       (cons "help" (make-sparse-keymap))
"ha"      'apropos
"hb"      'describe-bindings
"hc"      'describe-key-briefly
"hf"      'describe-function
"hF"      'describe-face
"hi"      'info-emacs-manual
"hI"      'info-display-manual
"hk"      'describe-key
"hK"      'describe-keymap
"hm"      'describe-mode
"hM"      'describe-active-minor-mode
"hp"      'describe-package
"hv"      'describe-variable
#+end_src
***** Quit
#+name: quit-binds
#+begin_src emacs-lisp
"q"       (cons "quit" (make-sparse-keymap))
"qd"      'restart-emacs-debug-init
"qr"      'restart-emacs
;"qq"      'save-buffers-kill-terminal
;"qQ"      'save-buffers-kill-emacs
"qq"      'save-buffers-kill-emacs
#+end_src
**** Major Modes
***** Org
#+name: org-binds
#+begin_src emacs-lisp
(despot-def org-mode-map
  "t"       '("org todo" . org-todo)
  "e"       '("org export" . org-export-dispatch)

  "d"       (cons "date" (make-sparse-keymap))
  "dd"      '("deadline" . org-deadline)
  "ds"      '("schedule" . org-schedule)
  "dt"      '("timestamp" . org-timestamp)

  "l"       (cons "link" (make-sparse-keymap))
  "ld"      '("Insert link" . org-insert-link)
  "ls"      '("Store link" . org-store-link)
  "lt"      '("Toggle link display" . org-toggle-link-display)

  "s"       (cons "tree" (make-sparse-keymap))
  "ss"      '("sparse tree"  . org-deadline)
  "sn"      '("narrow"       . org-narrow-to-subtree)
  "sN"      '("widen"        . widen)
  "sr"      '("refile"       . org-refile)
  "sS"      '("sort"         . org-sort)
 )
#+end_src
**** Not implemented yet
***** old ones
#+begin_src emacs-lisp
  ;  "a"       (cons "applications" (make-sparse-keymap))
  ;  "ac"      'calc-dispatch
  ;  "ap"      'list-processes
  ;  "aP"      'proced

;    "c"       (cons "code" (make-sparse-keymap))
;    "cb"      'flymake-show-buffer-diagnostics
;    "cc"      'compile
;    "cn"      'next-error
;    "cp"      'previous-error
;    "cr"      'recompile
;    "cx"      'kill-compilation
;    "c="      'indent-region-or-buffer

;    "j"       (cons "jump" (make-sparse-keymap))
;    "ji"      'imenu
;    "jg"      'avy-goto-char-2
;
;    "l"       (cons "layouts" tab-prefix-map)
;    "ld"      'tab-bar-close-tab
;    "lD"      'tab-bar-close-other-tabs
;    "lg"      'tab-bar-change-tab-group
;    "lm"      'tab-bar-move-tab-to
;    "lM"      'tab-bar-move-tab-to-group
;    "ll"      'tab-bar-switch-to-tab
;    "lR"      'tab-bar-rename-tab
;    "lt"      'other-tab-prefix
;    "lu"      'tab-bar-undo-close-tab
;    "l1"      '("select tab 1..8" . tab-bar-select-tab)
;    "l2"      'tab-bar-select-tab
;    "l3"      'tab-bar-select-tab
;    "l4"      'tab-bar-select-tab
;    "l5"      'tab-bar-select-tab
;    "l6"      'tab-bar-select-tab
;    "l7"      'tab-bar-select-tab
;    "l8"      'tab-bar-select-tab
;    "l TAB"   'tab-bar-switch-to-last-tab


;    "p"       (cons "projects" project-prefix-map)
;    "pt"      'project-open-in-tab

;    "s"       (cons "spelling" (make-sparse-keymap))
;    "sb"      'flyspell-buffer
;    "sn"      'flyspell-goto-next-error
;    "sr"      'flyspell-region
;
;    "T"       (cons "toggles" (make-sparse-keymap))
;    "Ta"      'auto-fill-mode
;    "Td"      'toggle-debug-on-error
;    "Tf"      'display-fill-column-indicator-mode
;    "Tl"      'toggle-truncate-lines
;    "Tm"      'flymake-mode
;    "Tn"      'display-line-numbers-mode
;    "Ts"      'flyspell-mode
;    "Tw"      'whitespace-mode
;    "TW"      'toggle-word-wrap
;
#+end_src
***** other bind areas
- dired
- capture
- workspace
- open
- emms
** Debugging
Some basic debugging functions
#+begin_src emacs-lisp
(defun show-current-time ()
  "Show current time."
  (interactive)
  (message (current-time-string)))

(defun hello-world ()
  "Say hello!"
  (interactive)
  (message "Hello, World!"))
#+end_src
