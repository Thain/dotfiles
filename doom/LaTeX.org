#+title: LaTeX Configuration
#+STARTUP: overview hideblocks
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/doom/extra/LaTeX.el

* Inbox
** Features I want

- Folding sections/subsections
- In enum/item environ, c-RET adds new item (with appropriate indentation)
- Keybind for going to section heading

*** indentation
*** keybinds

RET
TAB
c-RET
s-RET

** Preview Pane

- Toggling preview pane mode on a mode-specific bind
- Hook preview pane mode to delete all other windows, before opening in its own window
** T Improving Input

As per the articles by [[https://castel.dev/post/lecture-notes-1/][Gilles Castel]] and [[https://karthinks.com/software/latex-input-for-impatient-scholars/#snippets-snap-easy][Karthik Chikmagalur]], I want to improve my LaTeX input. There are a few ways to do this, and I'd like to more or less commit to one that is specifically helpful for what I write. Importantly, these all need to happen in ~insert-mode~, and will most likely rely in a large way on ~TAB~ and potentially ~;~.

SoMe particularly difficult things I do fairly often:
- Subscripts and superscripts
  - some just plain n, n-1, n+1, also for k, i, j
  - some numbers like 0,1, etc
- Environments
- Standalone references to variables in text
- Quiver diagrams on the fly
- Variable modifiers such as hat, overline
- Escaped set brackets

New DOOM-specific article dropped: [[https://michaelneuper.com/posts/efficient-latex-editing-with-emacs/][Michael Neuper]]
*** YASnippet

YASnippet is in some sense the standard. By default in doom, expanding a snippet at point is done with TAB. A lot of my problems may be solved if I could somehow switch this to SPC.

[[Latex-mode]] list of snipppets

*** CDLaTeX

CDLaTeX is lauded and allegedly has a solid heuristic for TAB movement.
GiThub repo [[https://github.com/cdominik/cdlatex][here]]

*** Auto Expanding Snippets

ThEse snippets expand as soon as they're finished being typed.
ThEre is a huge list of solid ones [[https://github.com/tecosaur/LaTeX-auto-activating-snippets/tree/master#annoying-subscripts][here]]
** T cdlatex move to ; and start using it
* Config
Basic config
#+begin_src emacs-lisp
;;(setq +latex-viewers '(pdf-tools))
;; (setq TeX-view-program-list '(("Sioyek" "sioyek %o")))
;; (setq TeX-view-program-selection '((output-pdf "Sioyek")))
(setq +latex-viewers '(zathura))

(setq TeX-view-program-list
        ;; '(("Sioyek" ("sioyek %o --reuse-instance"
        '(("Zathura" ("zathura %o"
        (mode-io-correlate " --forward-search-file %b --forward-search-line %n --inverse-search \"emacsclient --no-wait +%2:%3 %1\"")) "zathura"))
      TeX-view-program-selection
        '(((output-dvi has-no-display-manager) "dvi2tty")
          ((output-dvi style-pstricks)  "dvips and gv")
          (output-dvi "xdvi")
          (output-pdf "Zathura")
          (output-html "xdg-open")))

;; latex config
(use-package tex
  :defer t
  :ensure auctex
  :config
  (setq tex-auto-save t)
  (setq tex-parse-self t)
 ; (setq tex-fontify-script nil)
 ; (setq font-latex-fontify-script nil)
  ;; don't insert {} automatically for sub and superscripts
  (setq indent-tabs-mode nil)
  (setq c-basic-offset 2)
  (setq TeX-electric-sub-and-superscript nil)
  (setq-default tex-master nil))


#+end_src
Adding environments
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook
      (lambda ()
        (LaTeX-add-environments "align")
        (LaTeX-add-environments "prooftree")
        (LaTeX-add-environments "problem")
        (LaTeX-add-environments "proof")
        (LaTeX-add-environments "align*")))
#+end_src
Prettifying symbols and its behaviour
#+begin_src emacs-lisp
;(add-hook 'LaTeX-mode-hook #'prettify-symbols-mode)
;(setq prettify-symbols-unprettify-at-point t)
;(setq prettify-symbols-unprettify-at-point nil)
#+end_src
* Hooks
Enable tex folding in all LaTeX docs
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook (lambda ()
                             (cdlatex-mode 0)
                             (outline-minor-mode 1)
                             (flycheck-mode 0) ))
                             ; (TeX-fold-mode 0) ))
                             ;(latex-preview-pane-mode 1)
                             ;(TeX-fold-buffer)))
#+end_src
* Keybinds
#+begin_src emacs-lisp
(map! (:after latex
       :map LaTeX-mode-map
        :localleader
        :desc "run all commands"      "a" #'TeX-command-run-all
        :desc "env menu"              "e" #'LaTeX-environment
        :desc "view errors"           "q" #'TeX-next-error
        :desc "close block"           "C" #'LaTeX-close-block
        :desc "open preview pane"     "c" #'latex-preview-pane-mode
        :desc "open preview pane"     "p" #'helloworld
        :desc "sect menu"             "s" #'LaTeX-section
        (:prefix ("f" . "font")
                :desc "bold"            "b" #'(lambda () (interactive) (TeX-font nil 2))
                :desc "ital"            "i" #'(lambda () (interactive) (TeX-font nil 9))
                :desc "emph"            "e" #'(lambda () (interactive) (TeX-font nil 5))
                :desc "slant"           "s" #'(lambda () (interactive) (TeX-font nil 19))
                :desc "roman"           "r" #'(lambda () (interactive) (TeX-font nil 18))
                :desc "sans"            "f" #'(lambda () (interactive) (TeX-font nil 6))
                :desc "typewr"          "t" #'(lambda () (interactive) (TeX-font nil 20))
                :desc "smlcaps"         "c" #'(lambda () (interactive) (TeX-font nil 3))
                :desc "delete font"     "d" #'(lambda () (interactive) (TeX-font nil 4)))))

  ;;     :desc "ctrl + enter" "C-RET" #'LaTeX-insert-item
#+end_src
* CDLatex
#+begin_src emacs-lisp
;; (setq cdlatex-use-dollar-to-ensure-math t)
#+end_src
* Snippets
#+begin_src emacs-lisp
(defun my/yas-try-expanding-auto-snippets ()
  (when (bound-and-true-p 'yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))

;; Try after every insertion
;(add-hook 'post-self-insert-hook #'my/yas-try-expanding-auto-snippets)

(with-eval-after-load 'warnings
  (cl-pushnew '(yasnippet backquote-change) warning-suppress-types
              :test 'equal))
#+end_src
* Auto activating snippets
#+begin_src emacs-lisp
(use-package aas
  :hook (LaTeX-mode . aas-activate-for-major-mode)
  :hook (org-mode . aas-activate-for-major-mode)
  :config
  (aas-set-snippets 'text-mode
    ;; expand unconditionally
    ";o-" "ō"
    ";i-" "ī"
    ";a-" "ā"
    ";u-" "ū"
    ";e-" "ē")
  (aas-set-snippets 'latex-mode
    ;; set condition!
    :cond #'texmathp ; expand only while in math
    "supp" "\\supp"
    "On" "O(n)"
    "O1" "O(1)"
    ;; Use YAS/Tempel snippets with ease!
    ";ig" #'insert-register
    ";call-sin"
    (lambda (angle) ; Get as fancy as you like
      (interactive "sAngle: ")
      (insert (format "%s" (sin (string-to-number angle))))))
  ;; disable snippets by redefining them with a nil expansion
  (aas-set-snippets 'latex-mode
    "mk"   '(yas "\$$1\$$0") ; YASnippet snippet shorthand form
    "supp" nil))

(add-to-list 'load-path "~/.config/doom")
(require 'laas)
#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'LaTeX)
#+end_src
