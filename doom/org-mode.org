
#+title: Org Mode Configuration
#+STARTUP: overview hideblocks
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/doom/extra/org-mode.el

* Config
The basic set of configuration variables determining Org's behaviour.
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/documents/org"
        ;; todo vars
        org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "WAIT(w)" "DONE(d)" ))
        org-use-fast-todo-selection 'expert
        ;; agenda vars
        org-agenda-skip-scheduled-if-done t
        org-agenda-files (list (concat org-directory "/gtd/" ))
        ;; startup vars
        org-startup-folded t
        org-startup-indented t
        org-hide-block-startup t
        ;; org-startup-with-inline-images t
        ;; fontifying
        org-fontify-done-headline t
        org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-src-fontify-natively t
        ;; other
        org-cycle-include-plain-lists 'integrate ; plain lists start folded
        org-tags-column -60
        org-ellipsis "  " ;; folding symbol
        org-agenda-block-separator ""
        org-list-allow-alphabetical t   ; have a. A. a) A) list bullets
        ;;org-fold-catch-invisible-edits 'smart ; don't brazenly edit things you can't see
        org-archive-location "~/documents/.org-archive/%s_archive::"
        org-refile-targets '(("~/documents/org/gtd/admin.org" :maxlevel . 2)
                             ("~/documents/org/gtd/school.org" :maxlevel . 2)
                             ("~/documents/org/gtd/rlist.org" :maxlevel . 2)
                             ("~/documents/org/gtd/projects.org" :maxlevel . 2)
                            )
))
#+end_src

Remove auto fill mode, which introduces line breaks if lines get really long. I like to write long paragraphs in org mode so this is just a nuisance for me.
#+begin_src emacs-lisp
(remove-hook 'org-mode-hook #'auto-fill-mode)
#+end_src

Create a function to tangle config files after I save, so they're automatically kept up to date. However, only do this in my dots directory.
#+begin_src emacs-lisp
(defun tangle-dots ()
  (when (or (equal (file-name-directory (directory-file-name buffer-file-name))
               (concat (getenv "HOME") "/dots/"))
            (equal (file-name-directory (directory-file-name buffer-file-name))
               (concat (getenv "HOME") "/dots/doom/")))
    (org-babel-tangle)
    (message "%s tangled" buffer-file-name)))
#+end_src

* Appearance
** Hooks
#+begin_src emacs-lisp
(add-hook! org-mode :append
           #'visual-line-mode
           #'org-appear-mode
           #'olivetti-mode
           #'org-superstar-mode
           #'org-toggle-pretty-entities
           #'variable-pitch-mode
           (lambda () (add-hook 'after-save-hook #'tangle-dots :append :local ))
;           ;#'org-modern
)
#+end_src

** Face/font settings
Strike through completed org entries
#+begin_src emacs-lisp
(custom-set-faces!
  '(org-todo          :family "FiraCode Nerd Font")
  '(org-done          :family "FiraCode Nerd Font" :strike-through t)
  '(org-headline-done :strike-through t))
#+end_src

Making nicer and bigger faces for headings
Source Sans Pro version:
#+begin_src emacs-lisp
(custom-set-faces!
 '(org-document-title :family "Source Sans Pro" :height 2.5 :weight semibold)
 '(outline-1          :family "Source Sans Pro" :height 1.5 :weight semibold)
 '(outline-2          :family "Source Sans Pro" :height 1.3 :weight semibold)
 '(outline-3          :family "Source Sans Pro" :height 1.2 :weight semibold)
 '(outline-4          :family "Source Sans Pro" :height 1.1 :weight semibold)
 '(outline-5          :family "Source Sans Pro")
 '(outline-6          :family "Source Sans Pro")
 '(variable-pitch     :family "Source Sans Pro" :height 1.3  :weight regular)
 '(org-hide           :family "FiraCode Nerd Font" :height 0.8)
 )
#+end_src

ET Bembo:
#+begin_src emacs-lisp :tangle no
(custom-set-faces!
 '(outline-8          :family "ETBembo")
 '(outline-7          :family "ETBembo")
 '(outline-6          :family "ETBembo")
 '(outline-5          :family "ETBembo")
 '(outline-4          :family "ETBembo" :height 1.1)
 '(outline-3          :family "ETBembo" :height 1.3)
 '(outline-2          :family "ETBembo" :height 1.4)
 '(outline-1          :family "ETBembo" :height 1.5)
 '(org-document-title :family "ETBembo" :height 2.5 :underline nil)
 '(variable-pitch     :family "ETBembo" :height 1.4  :weight book)
 ;'(variable-pitch     :family "ETBembo" :height 150 :weight book)
 ;'(org-default        :family "ETBembo" :height 200 :weight book)
 '(org-hide           :family "FiraCode Nerd Font" :height 0.8)

 '(org-document-title :family "ETBembo" :weight bold :height 2.2 :underline nil)
 '(org-document-info-keyword :foreground "#676E95", :extend nil
                      :family "FiraCode Nerd Font" :height 200 :weight regular)
 '(org-meta-line      :foreground "#676E95", :extend nil
                      :family "FiraCode Nerd Font" :height 100 :weight regular)
 '(org-superstar-header-bullet :family "FiraCode Nerd Font")
 '(org-checkbox-statistics-todo :height 0.8)
 '(org-checkbox-statistics-done :height 0.8)
 ;'(org-latex-and-related :family "FiraCode Nerd Font" :weight normal :foreground "#82aaff")
 ;'(org-date :family "FiraCode Nerd Font" :weight normal :foreground "#82aaff")
 ;'(org-table :family "FiraCode Nerd Font")
 ;'(org-special-keyword :family "FiraCode Nerd Font" :weight normal :height 0.75 )
 '(fixed-pitch        :family "FiraCode Nerd Font"   :height 100))
#+end_src

Faces I want in fixed pitch:
#+begin_src emacs-lisp
(custom-set-faces!
 '(org-document-info-keyword :foreground "#676E95", :extend nil
                      :family "FiraCode Nerd Font" :weight regular)
 '(org-meta-line      :foreground "#676E95", :extend nil :height 0.8
                      :family "FiraCode Nerd Font" :weight regular)
 '(org-superstar-header-bullet :family "FiraCode Nerd Font")
 '(org-checkbox-statistics-todo :height 0.8)
 '(org-checkbox-statistics-done :height 0.8)
 '(org-tag   :family "FiraCode Nerd Font" :height 0.6)
 '(org-date  :family "FiraCode Nerd Font" :foreground nil)
 '(org-table :family "FiraCode Nerd Font" :height 0.8)
 '(hl-line   :background nil)
 '(fixed-pitch        :family "FiraCode Nerd Font"   :height 0.8)
;'(org-special-keyword :family "FiraCode Nerd Font" :weight normal :height 0.75 )
;'(org-latex-and-related :family "FiraCode Nerd Font" :weight normal :foreground "#82aaff")
 '(org-block             :family "FiraCode Nerd Font" :height 0.8)
 '(org-block-begin-line  :family "FiraCode Nerd Font")
 '(org-block-end-line    :family "FiraCode Nerd Font"))
#+end_src
Haven't figured out how to reference theme colors in the ~custom-set-faces!~ macro, so I made a function to set it in a hook.
#+begin_src emacs-lisp
(defun block-bg-change ()
   (set-face-attribute 'org-block-begin-line nil :background (doom-color 'bg))
   (set-face-attribute 'org-block-end-line   nil :background (doom-color 'bg))
)

(add-hook 'org-mode-hook 'block-bg-change)
#+end_src

My old monospaced version setup:
#+begin_src emacs-lisp :tangle no
(custom-set-faces!
 '(org-document-info-keyword :foreground "#676E95", :extend nil
                      :family "FiraCode Nerd Font" :weight regular)
 '(org-meta-line      :foreground "#676E95", :extend nil
                      :family "FiraCode Nerd Font" :weight regular)
 '(org-superstar-leading-bullet :family "FiraCode Nerd Font")
 '(org-latex-and-related :weight normal :foreground "#82aaff")
 '(org-date :weight normal :foreground "#82aaff")
 '(org-special-keyword :weight normal :height 0.75 ))
#+end_src

** Margins
Turn off line numbers, sets some margin on left and right sides of the buffer, and turns off tildes on empty lines.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
  (display-line-numbers-mode -1)
  (setq left-margin-width 2)
  (setq right-margin-width 2)
  (vi-tilde-fringe-mode -1)))
#+end_src
olivetti mode: if there is only one buffer, centers it with plenty of room on the sides.
#+begin_src emacs-lisp
(use-package! olivetti
  :after org olivetti
  :config
    ;(setq olivetti-min-body-width 110
    (setq olivetti-body-width 100
          olivetti-style 'fancy ; fantastic new layout
          olivetti-margin-width 6))

(custom-set-faces! '(fringe :background "#272B3A"))
;(custom-set-faces! '(fringe :background (doom-color 'blue)))
#+end_src

** Symbol replacements
~org-entities~: See the variable ~org-entities-user~ to add new symbol replacements for pretty entities in org.
If the symbols rendering require packages to be loaded, add these packages to ~org-latex-packages-alist~.
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t
      org-entities-user
    '(("R"            "\\mathbb{R}" t   "&#82;" "R" "R" "ℝ")
      ("C"            "\\mathbb{C}" t   "&#67;" "C" "C" "ℂ")
      ("N"            "\\mathbb{N}" t   "&#78;" "N" "N" "ℕ")
      ("Z"            "\\mathbb{Z}" t   "&#90;" "Z" "Z" "ℤ")
      ("mapsto"       "\\mapsto"    t   "&#8614;" "mapsto" "mapsto" "↦")
      ("contra"       "\\lightning"  nil "&#11085;" "contra" "contra" "↯")
      ("Rarrow"       "\\Rightarrow"  t "&#8658;" "=>" "=>" "⇒")
      ("inj"          "\\hookrightarrow" t "&#8618;" "inj" "inj" "↪")
      ;("yo"           "\\yo"           nil "&#x3088;" "y" "y" "よ")
      ("f"            "\\textit{f}" nil "&fnof;" "f" "f" "ƒ")))

#+end_src

~org-appear~: when point is over an entity, show the contents.
#+begin_src emacs-lisp
  (setq org-appear-autoemphasis t   ; need org-hide-emphasis-markers
        org-appear-autosubmarkers t ; need org-pretty-entities
        org-appear-autoentities t   ; need org-pretty-entities
  )
#+end_src

~prettify-symbols~
#+begin_src emacs-lisp
(add-hook! org-mode :append
   (setq prettify-symbols-alist
        '(("TODO" . "T") ("NEXT" . "N") ("WAIT" . "W") ("DONE" . "D")
          ("[ ]" . "☐")  ("[X]" . "◩")  ("[-]" . "☑")
         ;("[#A]" . "") ("[#B]" . "") ("[#C]" . "")
          ("#+begin_src" . "»")    ("#+end_src" . "«")
          ("#+BEGIN_SRC" . "»")    ("#+END_SRC" . "«")
          ("#+BEGIN_EXPORT" . "»") ("#+END_EXPORT" . "«")
          ("#+RESULTS:" . "")     (":PROPERTIES:" . "")
          ("#+PROPERTY:" . "")     ("#+STARTUP:" . "»")
          ;("#+STARTUP:" . "")
          ;(":Effort:" . "")
          ("#+TITLE" . "󰬛")        ("#+title" . "󰬛")
          ("#+SUBTITLE" . "󰬚")     ("#+subtitle" . "󰬚")
          ("#+AUTHOR" . "󰬈")       ("#+author" . "󰬈")
          ("#+DATE" . "󰬋")         ("#+date" . "󰬋")
          ("[0/1]" . "󰽤") ("[1/1]" . "󰪥")
          ("[1/2]" . "󰪡") ("[0/2]" . "󰽤") ("[2/2]" . "󰪥")
          ("[0/3]" . "") ("[1/3]" . "󰫄") ("[2/3]" . "󰫆") ("[3/3]" . "󰫈")
          ("[0/4]" . "󰽤") ("[1/4]" . "󰪟")
          ("[2/4]" . "󰪡") ("[3/4]" . "󰪣") ("[4/4]" . "󰪥")
          ("[0/6]" . "") ("[1/6]" . "󰫃") ("[2/6]" . "󰫄")
          ("[3/6]" . "󰫅") ("[4/6]" . "󰫆") ("[5/6]" . "󰫇") ("[6/6]" . "󰫈")
          ("[0/8]" . "󰽤") ("[1/8]" . "󰪞") ("[2/8]" . "󰪟") ("[3/8]" . "󰪠")
          ("[4/8]" . "󰪡") ("[5/8]" . "󰪢") ("[6/8]" . "󰪣") ("[7/8]" . "󰪤")
          ("[8/8]" . "󰪥")
          ;("SCHEDULED:" . "")
          ;("DEADLINE:" . "")
          ))
   (prettify-symbols-mode 1)
   )
#+end_src
** Superstar mode
#+begin_src emacs-lisp
;(setq org-hidden-keywords '(title)) ;; hide #+TITLE:

; alternatives:  '("◉" "◈" "○" "▷")
(setq org-superstar-item-bullet-alist
         '((?- . ?•) (?+ . ?◉)) ;; different bullets for plain lists
      org-superstar-headline-bullets-list
         '("󱂈" "󱂉" "󱂊" "󱂋" "󱂌" "󱂍") ;; different outline markers
      ;org-hide-leading-stars t)
      org-superstar-remove-leading-stars t)
#+end_src

* Capture
#+begin_src emacs-lisp
(setq org-capture-templates '(
   ("t" "TODO" entry (file "gtd/inbox.org") "* TODO %?" :unnarrowed t)
   ( "r" "Reading list" )
   ("re" "Emacs" entry (file/headline "gtd/rlist.org" "Emacs") "* %?")
   ("ro" "Org Mode" entry (file+olp "gtd/rlist.org" "Org Mode" "Other") "* %?")
   ("ra" "Arch" entry (file+headline "gtd/rlist.org" "Arch") "* %?")
   ("rr" "Other" entry (file "gtd/rlist.org" ) "* %?")
))
#+end_src
* Agenda
#+begin_src emacs-lisp
(after! org
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-files (list ( concat org-directory "/gtd/" ))
        org-agenda-window-setup 'other-tab
        ;org-agenda-block-separator ""
        ;; styling
        org-agenda-tags-column 'auto
        org-agenda-block-separator ?─
        org-agenda-time-grid
        '((daily today require-timed)
          (800 1000 1200 1400 1600 1800 2000)
          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
        org-agenda-current-time-string
          "⭠ now ─────────────────────────────────────────────────"
))
#+end_src

Editing the Agenda keymap
#+begin_src emacs-lisp
(map! :map evil-org-agenda-mode-map
      :m "q" 'org-agenda-quit
      :m "Q" 'org-agenda-exit
      )
#+end_src

** Appearance
Making nicer and bigger faces for headings
Source Sans Pro version:
#+begin_src emacs-lisp :tangle no
;; First create new face which is a copy of hl-line-face
(copy-face 'hl-line 'hl-line-agenda-face)
(copy-face 'default 'default-agenda-face)

;; Change what you want in this new face
(set-face-attribute 'hl-line-agenda-face nil
                    :family "Source Sans Pro")

(set-face-attribute 'default-agenda-face nil
                    :family "Source Sans Pro")

;; The function to use the new face
(defun my-org-agenda-hl-line ()
  (set (make-local-variable 'hl-line-face) 'hl-line-agenda-face)
  (buffer-face-set 'default-agenda-face)
  (hl-line-mode)
)

;; Finally, the hook
(add-hook 'org-agenda-mode-hook 'my-org-agenda-hl-line)

(custom-set-faces!
 '(org-agenda-structure :family "Source Sans Pro" :height 2.5 :weight semibold)
 ;'(variable-pitch     :family "Source Sans Pro" :height 1.4  :weight regular)
 ;'(org-hide           :family "FiraCode Nerd Font" :height 0.8)
 )
#+end_src
#+begin_src emacs-lisp
(custom-set-faces!
 '(org-agenda-structure :family "Source Sans Pro" :height 2.5 :weight semibold)
 )
#+end_src

Faces I want in fixed pitch:
#+begin_src emacs-lisp :tangle no
(custom-set-faces!
 '(org-document-info-keyword :foreground "#676E95", :extend nil
                      :family "FiraCode Nerd Font" :weight regular)
 '(org-meta-line      :foreground "#676E95", :extend nil :height 0.8
                      :family "FiraCode Nerd Font" :weight regular)
 '(org-superstar-header-bullet :family "FiraCode Nerd Font")
 '(org-checkbox-statistics-todo :height 0.8)
 '(org-checkbox-statistics-done :height 0.8)
 '(org-tag   :family "FiraCode Nerd Font" :height 0.6)
 '(org-date  :family "FiraCode Nerd Font" :foreground "#82aaff")
 '(org-table :family "FiraCode Nerd Font" :height 0.8)
 '(fixed-pitch        :family "FiraCode Nerd Font"   :height 0.8)
 ;'(org-special-keyword :family "FiraCode Nerd Font" :weight normal :height 0.75 )
 ;'(org-latex-and-related :family "FiraCode Nerd Font" :weight normal :foreground "#82aaff")
 )
#+end_src

Hooks for olivetti:
#+begin_src emacs-lisp
(add-hook! org-agenda-mode
           #'olivetti-mode
           )
(add-hook 'org-agenda-hook (lambda () (olivetti-mode 1)))
(add-hook 'org-agenda-mode-hook (lambda () (olivetti-mode 1)))
#+end_src

** Custom Commands
#+begin_src emacs-lisp :tangle no
      (org-agenda-sorting-strategy '((tags todo-state-down priority-down category-keep)))
 (tags-todo "tickler-SCHEDULED={.+}/TODO|LOOP|WAIT|NEXT"
      ((org-agenda-overriding-header "Unscheduled Reminders\n")))
(todo "PROJ" ((org-agenda-overriding-header "Projects\n")))
(tags "CLOSED>=\"<-7d>\"|LAST_REPEAT>=\"<-7d>\""
     ((org-agenda-overriding-header "Completed in the Last 7 Days\n")))
(agenda "" ((org-agenda-span 'day)
(org-agenda-sorting-strategy '((agenda time-up priority-down category-keep)))
(org-agenda-show-log t)
(org-agenda-log-mode-items '(clock))))
#+end_src
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
  '(("z" "My Agenda"
     ((todo "NEXT"
            ((org-agenda-overriding-header "Next Tasks\n")))
      (tags-todo "-tickler/TODO|WAIT"
           ((org-agenda-overriding-header "Task Stack\n")))
      (agenda ""
           ((org-agenda-span 7)
            (org-agenda-start-day "+1d")
            (org-agenda-overriding-header "Upcoming\n")
            (org-agenda-show-log nil)))))
    ("n" "My Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "\nTasks\n"))
     ))
   ))
)
#+end_src

* Evil Keymap
#+begin_src emacs-lisp
(map! :map evil-org-mode-map :m :prefix "g"
      :m "h" 'evil-first-non-blank-of-visual-line
      :m "H" 'evil-org-top
      :m "K" 'org-up-element
      :m "k" 'org-backward-heading-same-level
      :m "J" 'org-down-element
      :m "j" 'org-forward-heading-same-level
      :m "l" 'evil-end-of-visual-line
      )
#+end_src
I want visual lines with ~j~ and ~k~, but buffer lines for ~A~, ~D~, etc. So instead of using ~evil-respect-visual-line-mode~, just rebind these two commands to their visual counterparts. Still need to somehow make this happen only in org mode ideally.
#+begin_src emacs-lisp
(map! :map evil-motion-state-map
      "j" 'evil-next-visual-line
      "k" 'evil-previous-visual-line
      )
#+end_src
* Export
** LaTeX
#+begin_src emacs-lisp :tangle no
(setq org-latex-default-packages-alist nil
      org-latex-toc-command nil
      org-latex-hyperref-template nil)
      org-format-latex-options (plist-put org-format-latex-options :scale 2.0)

(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))

(eval-after-load 'org
  '(setf org-highlight-latex-and-related '(latex)))

(setq org-latex-classes
   '(("my-article" "
\\documentclass[10pt,a4paper]{article}
\\include{~/.config/latex/prelude}

\\usepackage{hyperref}
\\hypersetup{
  colorlinks=true,
  linkcolor=[rgb]{0,0.37,0.53},
  citecolor=[rgb]{0,0.47,0.68},
  filecolor=[rgb]{0,0.37,0.53},
  urlcolor=[rgb]{0,0.37,0.53},
  pagebackref=true,
  linktoc=all,}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
)))
#+end_src
** HTML
* Calendar
** Date Formats
Custom date formats
#+begin_src emacs-lisp
;(setq-default org-display-custom-times t)
;(setq org-time-stamp-custom-formats '("<%a %b %e>" . "<%a %b %e %Y %H:%M>"))
(setq cfw:event-format-detail "%s - %e : %l")
(setq cfw:event-format-overview "%s - %e : %l")

#+end_src
** Holidays
#+begin_src emacs-lisp
(setq calendar-holidays '((holiday-fixed 1 1 "New Year's Day")
        (holiday-float 1 1 3 "Martin Luther King Day")
        (holiday-fixed 2 2 "Groundhog Day")
        (holiday-fixed 2 14 "Valentine's Day")
        (holiday-float 2 1 3 "President's Day")
        (holiday-fixed 3 17 "St. Patrick's Day")
        (holiday-fixed 4 1 "April Fools' Day")
        (holiday-float 5 0 2 "Mother's Day")
        (holiday-float 5 1 -1 "Memorial Day")
        (holiday-fixed 6 14 "Flag Day")
        (holiday-float 6 0 3 "Father's Day")
        (holiday-fixed 7 4 "Independence Day")
        (holiday-float 9 1 1 "Labor Day")
        (holiday-float 10 1 2 "Columbus Day")
        (holiday-fixed 10 31 "Halloween")
        (holiday-fixed 11 11 "Veteran's Day")
        (holiday-float 11 4 4 "Thanksgiving")
        (holiday-easter-etc)
        (holiday-fixed 12 25 "Christmas")
        (holiday-chinese-new-year)
        (if calendar-chinese-all-holidays-flag
            (append
             (holiday-chinese 1 15 "Lantern Festival")
             (holiday-chinese-qingming)
             (holiday-chinese 5 5 "Dragon Boat Festival")
             (holiday-chinese 7 7 "Double Seventh Festival")
             (holiday-chinese 8 15 "Mid-Autumn Festival")
             (holiday-chinese 9 9 "Double Ninth Festival")
             (holiday-chinese-winter-solstice)))
        (solar-equinoxes-solstices)
        (holiday-sexp calendar-daylight-savings-starts
                      (format "Daylight Saving Time Begins %s"
                              (solar-time-string
                               (/ calendar-daylight-savings-starts-time
                                  (float 60))
                               calendar-standard-time-zone-name)))
        (holiday-sexp calendar-daylight-savings-ends
                      (format "Daylight Saving Time Ends %s"
                              (solar-time-string
                               (/ calendar-daylight-savings-ends-time
                                  (float 60))
                               calendar-daylight-time-zone-name)))))
#+end_src
** org-caldav
#+begin_src emacs-lisp
(setq org-caldav-url "https://cloud.thain.xyz/remote.php/dav/calendars/liam"
      org-icalendar-timezone "Europe/Amsterdam")

(setq org-caldav-calendars
  '((:calendar-id "personal"
     :files (( concat org-directory "/calendar/personal.org" ))
     :inbox (file+headline ( concat org-directory "/calendar/personal.org" ) "Inbox"))
     ;;:inbox "~/documents/org/calendar/personal.org")
    (:calendar-id "class"
     :files (( concat org-directory "/calendar/class.org" ))
     :inbox ( concat org-directory "/calendar/class.org" ))))
#+end_src
From the example: what does this do?
~:skip-conditions (regexp "soccer")~
* Inactive
** Journal
#+begin_src emacs-lisp
(after! org-journal
  (setq org-journal-dir (concat org-directory "/journal/")
        org-journal-file-type 'weekly))

;; org-journal keybinds
(map! :leader
      (:prefix ("j" . "journal")
        :desc "New Entry"           "j" #'org-journal-new-entry
        :desc "Open Journal"        "o" #'org-journal-open-current-journal-file
        :desc "Save and Exit"       "d" #'(lambda () (interactive) (save-buffer) (kill-buffer-and-window))
        :desc "Next Entry"          "n" #'org-journal-next-entry
        :desc "Previous Entry"      "p" #'org-journal-previous-entry))

#+end_src
** Roam
#+begin_src emacs-lisp :tangle no
;; org roam config
;;  manual told me to, something  about cache consistency and having roam available on startup
;;(org-roam-db-autosync-mode)

(setq org-roam-directory ( concat org-directory "/roam" )
      org-id-locations-file ( concat org-directory "/roam/.orgids" ))

;; org roam keybinds
(map! :leader
      (:prefix ("r" . "roam")
        :desc "Find node"                  "f" #'org-roam-node-find
        :desc "Find ref"                   "F" #'org-roam-ref-find
        :desc "Show graph"                 "g" #'org-roam-graph
        :desc "Insert node"                "i" #'org-roam-node-insert
        :desc "Capture to node"            "c" #'org-roam-capture
        :desc "Toggle roam buffer"         "b" #'org-roam-buffer-toggle
        :desc "Launch roam buffer"         "B" #'org-roam-buffer-display-dedicated
        :desc "Sync database"              "s" #'org-roam-db-sync
        :desc "Add ref"                    "r" #'org-roam-ref-add
        :desc "Add alias"                  "a" #'org-roam-alias-add))
;;         (:prefix ("d" . "by date")
;;                 :desc "Arbitrary date" "d" #'org-roam-dailies-find-date
;;                 :desc "Today"          "t" #'org-roam-dailies-find-today
;;                 :desc "Tomorrow"       "m" #'org-roam-dailies-find-tomorrow
;;                 :desc "Yesterday"      "y" #'org-roam-dailies-find-yesterday
;;                 :desc "Goto previous note"        "b" #'org-roam-dailies-goto-previous-note
;;                 :desc "Goto date"                 "d" #'org-roam-dailies-goto-date
;;                 :desc "Capture date"              "D" #'org-roam-dailies-capture-date
;;                 :desc "Goto next note"            "f" #'org-roam-dailies-goto-next-note
;;                 :desc "Goto tomorrow"             "m" #'org-roam-dailies-goto-tomorrow
;;                 :desc "Capture tomorrow"          "M" #'org-roam-dailies-capture-tomorrow
;;                 :desc "Capture today"             "n" #'org-roam-dailies-capture-today
;;                 :desc "Goto today"                "t" #'org-roam-dailies-goto-today
;;                 :desc "Capture today"             "T" #'org-roam-dailies-capture-today
;;                 :desc "Goto yesterday"            "y" #'org-roam-dailies-goto-yesterday
;;                 :desc "Capture yesterday"         "Y" #'org-roam-dailies-capture-yesterday
;;                 :desc "Find directory"            "-" #'org-roam-dailies-find-directory)))

#+end_src

* Footer
#+begin_src emacs-lisp
(provide 'org-mode)
#+end_src
